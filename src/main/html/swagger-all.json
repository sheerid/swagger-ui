{
    "basePath": "/rest/0.5",
    "definitions": {
        "Account": {
            "properties": {
                "accountId": {"type": "string"},
                "company": {"type": "string"},
                "firstName": {"type": "string"},
                "lastName": {"type": "string"}
            },
            "type": "object"
        },
        "Affiliation": {
            "properties": {
                "attributes": {
                    "items": {"type": "string"},
                    "type": "array"
                },
                "end": {
                    "format": "long",
                    "type": "number"
                },
                "organizationId": {
                    "format": "long",
                    "type": "number"
                },
                "organizationName": {"type": "string"},
                "sourcePersonId": {"type": "string"},
                "start": {
                    "format": "long",
                    "type": "number"
                },
                "type": {
                    "$ref": "#/definitions/AffiliationType",
                    "enum": [
                        "STUDENT_COLLEGE_BOUND",
                        "STUDENT_FULL_TIME",
                        "STUDENT_PART_TIME",
                        "GRADUATE",
                        "ALUMNUS",
                        "FACULTY",
                        "EMPLOYEE",
                        "RESELLER",
                        "NON_PROFIT",
                        "ACTIVE_DUTY",
                        "VETERAN",
                        "RESERVIST",
                        "MILITARY_FAMILY",
                        "MILITARY_RETIREE",
                        "DISABLED_VETERAN",
                        "CIVILIAN_EMPLOYEE",
                        "FIREFIGHTER",
                        "POLICE",
                        "EMT",
                        "NURSE",
                        "MEMBER",
                        "CUSTOMER",
                        "OWNER",
                        "BUSINESS",
                        "BUSINESS_CONTACT",
                        "CONTRACTOR"
                    ],
                    "type": "string"
                },
                "updated": {
                    "format": "long",
                    "type": "number"
                }
            },
            "type": "object"
        },
        "AffiliationType": {
            "enum": [
                "ACTIVE_DUTY",
                "ALUMNUS",
                "BUSINESS",
                "BUSINESS_CONTACT",
                "CIVILIAN_EMPLOYEE",
                "CONTRACTOR",
                "CUSTOMER",
                "DISABLED_VETERAN",
                "EMPLOYEE",
                "EMT",
                "FACULTY",
                "FIREFIGHTER",
                "GRADUATE",
                "MEMBER",
                "MILITARY_FAMILY",
                "MILITARY_RETIREE",
                "NON_PROFIT",
                "NURSE",
                "OWNER",
                "POLICE",
                "RESELLER",
                "RESERVIST",
                "STUDENT_COLLEGE_BOUND",
                "STUDENT_FULL_TIME",
                "STUDENT_PART_TIME",
                "VETERAN"
            ],
            "type": "string"
        },
        "AmbiguousOrganizationVerificationError": {
            "properties": {
                "code": {
                    "format": "integer",
                    "type": "number"
                },
                "message": {"type": "string"},
                "organizations": {
                    "items": {"$ref": "#/definitions/Organization"},
                    "type": "array"
                },
                "propertyName": {"type": "string"}
            },
            "type": "object"
        },
        "Asset": {
            "properties": {
                "assetType": {
                    "$ref": "#/definitions/AssetType",
                    "enum": [
                        "ID_CARD",
                        "DATED_ID_CARD",
                        "OFFICIAL_LETTER",
                        "OTHER",
                        "PAY_STUB",
                        "ACCEPTANCE_LETTER",
                        "CLASS_SCHEDULE",
                        "TRANSCRIPT",
                        "TUITION_RECEIPT",
                        "REGISTRATION_RECEIPT",
                        "INSURANCE_CARD",
                        "DD214",
                        "IRS_SCHEDULE_G_FORM_1120",
                        "IRS_SCHEDULE_K1_FORM_1120S",
                        "IRS_SCHEDULE_K1_FORM_1065",
                        "IRS_SCHEDULE_C_OR_CEZ_PAGE_1",
                        "IRS_SCHEDULE_B1_FORM_1065",
                        "REPORT_CARD",
                        "DBA_REGISTRATION",
                        "BUSINESS_TAX_FORM_PAGE1",
                        "ARTICLES_OF_INCORPORATION",
                        "SECRETARY_OF_STATE_FILING",
                        "VENDOR_STATEMENT",
                        "LEASE_AGREEMENT",
                        "LETTER_OF_AUTHORIZATION",
                        "POWER_OF_ATTORNEY"
                    ],
                    "type": "string"
                },
                "assetTypeDescription": {"type": "string"},
                "comments": {
                    "items": {"$ref": "#/definitions/Comment"},
                    "type": "array"
                },
                "created": {
                    "format": "long",
                    "type": "number"
                },
                "errors": {
                    "items": {"$ref": "#/definitions/Error"},
                    "type": "array"
                },
                "expires": {
                    "format": "long",
                    "type": "number"
                },
                "id": {"type": "string"},
                "issued": {
                    "format": "long",
                    "type": "number"
                },
                "name": {"type": "string"},
                "purged": {
                    "enum": [
                        "true",
                        "false",
                        "null"
                    ],
                    "type": "boolean"
                },
                "reviewer": {"type": "string"},
                "size": {
                    "format": "long",
                    "type": "number"
                },
                "status": {
                    "$ref": "#/definitions/AssetStatus",
                    "enum": [
                        "ACCEPTED",
                        "PENDING_REVIEW",
                        "REJECTED"
                    ],
                    "type": "string"
                },
                "type": {"type": "string"}
            },
            "type": "object"
        },
        "AssetStatus": {
            "enum": [
                "ACCEPTED",
                "PENDING_REVIEW",
                "REJECTED"
            ],
            "type": "string"
        },
        "AssetType": {
            "enum": [
                "ACCEPTANCE_LETTER",
                "ARTICLES_OF_INCORPORATION",
                "BUSINESS_TAX_FORM_PAGE1",
                "CLASS_SCHEDULE",
                "DATED_ID_CARD",
                "DBA_REGISTRATION",
                "DD214",
                "ID_CARD",
                "INSURANCE_CARD",
                "IRS_SCHEDULE_B1_FORM_1065",
                "IRS_SCHEDULE_C_OR_CEZ_PAGE_1",
                "IRS_SCHEDULE_G_FORM_1120",
                "IRS_SCHEDULE_K1_FORM_1065",
                "IRS_SCHEDULE_K1_FORM_1120S",
                "LEASE_AGREEMENT",
                "LETTER_OF_AUTHORIZATION",
                "OFFICIAL_LETTER",
                "OTHER",
                "PAY_STUB",
                "POWER_OF_ATTORNEY",
                "REGISTRATION_RECEIPT",
                "REPORT_CARD",
                "SECRETARY_OF_STATE_FILING",
                "TRANSCRIPT",
                "TUITION_RECEIPT",
                "VENDOR_STATEMENT"
            ],
            "type": "string"
        },
        "Attribute": {
            "description": "placeholder",
            "properties": {},
            "type": "object"
        },
        "AuthorizedVerificationRequest": {
            "properties": {
                "expires": {
                    "format": "long",
                    "type": "number"
                },
                "fields": {
                    "items": {"$ref": "#/definitions/Field"},
                    "type": "array"
                },
                "id": {"type": "string"}
            },
            "type": "object"
        },
        "BulkCertificationTask": {
            "properties": {
                "bulkAllBatchRecordsProcessed": {
                    "enum": [
                        "true",
                        "false",
                        "null"
                    ],
                    "type": "boolean"
                },
                "bulkBatchId": {"type": "string"},
                "bulkBatchRecordCount": {
                    "format": "integer",
                    "type": "number"
                },
                "bulkBatchRecordsProcessed": {
                    "format": "integer",
                    "type": "number"
                },
                "bulkErrors": {
                    "items": {"type": "object"},
                    "type": "array"
                },
                "bulkTaskStatus": {"type": "string"},
                "created": {"type": "string"},
                "type": {"type": "string"}
            },
            "type": "object"
        },
        "CertificationPropertyError": {
            "properties": {
                "code": {
                    "format": "integer",
                    "type": "number"
                },
                "message": {"type": "string"},
                "propertyName": {"type": "string"}
            },
            "type": "object"
        },
        "CertificationRequest": {
            "properties": {
                "attribute": {
                    "$ref": "#/definitions/Attribute",
                    "type": "string"
                },
                "config": {
                    "$ref": "#/definitions/CertificationRequestConfig",
                    "type": "string"
                },
                "metadata": {"type": "string"},
                "timestamp": {
                    "format": "long",
                    "type": "number"
                }
            },
            "type": "object"
        },
        "CertificationRequestConfig": {
            "properties": {
                "consolationRewardIds": {
                    "items": {"type": "string"},
                    "type": "array"
                },
                "metadata": {"type": "string"},
                "rewardIds": {
                    "items": {"type": "string"},
                    "type": "array"
                }
            },
            "type": "object"
        },
        "CertificationResponse": {
            "properties": {
                "errors": {
                    "items": {"$ref": "#/definitions/Error"},
                    "type": "array"
                },
                "metadata": {"type": "string"},
                "request": {
                    "$ref": "#/definitions/CertificationRequest",
                    "type": "string"
                },
                "requestId": {"type": "string"},
                "result": {
                    "enum": [
                        "true",
                        "false",
                        "null"
                    ],
                    "type": "boolean"
                },
                "status": {
                    "$ref": "#/definitions/VerificationStatus",
                    "enum": [
                        "NEW",
                        "OPEN",
                        "PENDING",
                        "COMPLETE"
                    ],
                    "type": "string"
                },
                "timestamp": {
                    "format": "long",
                    "type": "number"
                }
            },
            "type": "object"
        },
        "ChallengeQuestion": {
            "properties": {
                "choices": {
                    "items": {"type": "string"},
                    "type": "array"
                },
                "id": {"type": "string"},
                "questionText": {"type": "string"}
            },
            "type": "object"
        },
        "ChallengeQuestionSet": {
            "properties": {
                "id": {"type": "string"},
                "questions": {
                    "items": {"$ref": "#/definitions/ChallengeQuestion"},
                    "type": "array"
                }
            },
            "type": "object"
        },
        "Comment": {
            "properties": {
                "created": {
                    "format": "long",
                    "type": "number"
                },
                "text": {"type": "string"},
                "userId": {"type": "string"}
            },
            "type": "object"
        },
        "ConfigurationEntry": {
            "properties": {
                "key": {"type": "string"},
                "value": {"type": "string"}
            },
            "type": "object"
        },
        "Coupon": {
            "properties": {
                "id": {"type": "string"},
                "state": {
                    "$ref": "#/definitions/TokenState",
                    "enum": [
                        "ACTIVE",
                        "EXPIRED",
                        "USED"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "Dataset": {
            "properties": {
                "affiliationType": {
                    "$ref": "#/definitions/AffiliationType",
                    "enum": [
                        "STUDENT_COLLEGE_BOUND",
                        "STUDENT_FULL_TIME",
                        "STUDENT_PART_TIME",
                        "GRADUATE",
                        "ALUMNUS",
                        "FACULTY",
                        "EMPLOYEE",
                        "RESELLER",
                        "NON_PROFIT",
                        "ACTIVE_DUTY",
                        "VETERAN",
                        "RESERVIST",
                        "MILITARY_FAMILY",
                        "MILITARY_RETIREE",
                        "DISABLED_VETERAN",
                        "CIVILIAN_EMPLOYEE",
                        "FIREFIGHTER",
                        "POLICE",
                        "EMT",
                        "NURSE",
                        "MEMBER",
                        "CUSTOMER",
                        "OWNER",
                        "BUSINESS",
                        "BUSINESS_CONTACT",
                        "CONTRACTOR"
                    ],
                    "type": "string"
                },
                "fields": {
                    "items": {"type": "string"},
                    "type": "array"
                },
                "id": {"type": "string"},
                "name": {"type": "string"},
                "orgParameters": {
                    "items": {"type": "string"},
                    "type": "array"
                },
                "organization": {
                    "$ref": "#/definitions/Organization",
                    "type": "string"
                },
                "updated": {
                    "format": "long",
                    "type": "number"
                }
            },
            "type": "object"
        },
        "DatasetEntry": {
            "properties": {
                "affiliationType": {
                    "$ref": "#/definitions/AffiliationType",
                    "enum": [
                        "STUDENT_COLLEGE_BOUND",
                        "STUDENT_FULL_TIME",
                        "STUDENT_PART_TIME",
                        "GRADUATE",
                        "ALUMNUS",
                        "FACULTY",
                        "EMPLOYEE",
                        "RESELLER",
                        "NON_PROFIT",
                        "ACTIVE_DUTY",
                        "VETERAN",
                        "RESERVIST",
                        "MILITARY_FAMILY",
                        "MILITARY_RETIREE",
                        "DISABLED_VETERAN",
                        "CIVILIAN_EMPLOYEE",
                        "FIREFIGHTER",
                        "POLICE",
                        "EMT",
                        "NURSE",
                        "MEMBER",
                        "CUSTOMER",
                        "OWNER",
                        "BUSINESS",
                        "BUSINESS_CONTACT",
                        "CONTRACTOR"
                    ],
                    "type": "string"
                },
                "expirationDate": {
                    "format": "long",
                    "type": "number"
                },
                "id": {"type": "string"},
                "metadata": {"type": "string"},
                "organizationId": {
                    "format": "long",
                    "type": "number"
                }
            },
            "type": "object"
        },
        "DatasetWithStats": {
            "properties": {
                "affiliationType": {
                    "$ref": "#/definitions/AffiliationType",
                    "enum": [
                        "STUDENT_COLLEGE_BOUND",
                        "STUDENT_FULL_TIME",
                        "STUDENT_PART_TIME",
                        "GRADUATE",
                        "ALUMNUS",
                        "FACULTY",
                        "EMPLOYEE",
                        "RESELLER",
                        "NON_PROFIT",
                        "ACTIVE_DUTY",
                        "VETERAN",
                        "RESERVIST",
                        "MILITARY_FAMILY",
                        "MILITARY_RETIREE",
                        "DISABLED_VETERAN",
                        "CIVILIAN_EMPLOYEE",
                        "FIREFIGHTER",
                        "POLICE",
                        "EMT",
                        "NURSE",
                        "MEMBER",
                        "CUSTOMER",
                        "OWNER",
                        "BUSINESS",
                        "BUSINESS_CONTACT",
                        "CONTRACTOR"
                    ],
                    "type": "string"
                },
                "entryCount": {
                    "format": "long",
                    "type": "number"
                },
                "fields": {
                    "items": {"type": "string"},
                    "type": "array"
                },
                "id": {"type": "string"},
                "name": {"type": "string"},
                "orgParameters": {
                    "items": {"type": "string"},
                    "type": "array"
                },
                "organization": {
                    "$ref": "#/definitions/Organization",
                    "type": "string"
                },
                "updated": {
                    "format": "long",
                    "type": "number"
                }
            },
            "type": "object"
        },
        "Error": {
            "properties": {
                "code": {
                    "format": "integer",
                    "type": "number"
                },
                "message": {"type": "string"},
                "propertyName": {"type": "string"}
            },
            "type": "object"
        },
        "EventType": {
            "enum": [
                "ASYNCHRONOUS_UPDATE",
                "CREATE",
                "DATA_EXPIRATION",
                "DEACTIVATE",
                "SYNCHRONOUS_UPDATE"
            ],
            "type": "string"
        },
        "ExpiringToken": {
            "properties": {
                "expires": {
                    "format": "long",
                    "type": "number"
                },
                "token": {"type": "string"}
            },
            "type": "object"
        },
        "Field": {
            "properties": {
                "name": {"type": "string"},
                "required": {"type": "boolean"}
            },
            "type": "object"
        },
        "FieldConfig": {
            "properties": {
                "defaultValue": {"type": "string"},
                "editable": {"type": "boolean"},
                "multiple": {"type": "boolean"},
                "name": {"type": "string"},
                "pattern": {"type": "string"},
                "required": {"type": "boolean"},
                "type": {"type": "string"},
                "value": {"type": "string"},
                "values": {
                    "items": {"type": "string"},
                    "type": "array"
                }
            },
            "type": "object"
        },
        "FieldNumberRange": {
            "properties": {
                "name": {"type": "string"},
                "required": {"type": "boolean"},
                "type": {"type": "string"},
                "values": {
                    "$ref": "#/definitions/Range",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "FieldText": {
            "properties": {
                "name": {"type": "string"},
                "pattern": {"type": "string"},
                "required": {"type": "boolean"}
            },
            "type": "object"
        },
        "FieldType": {
            "properties": {
                "name": {"type": "string"},
                "required": {"type": "boolean"},
                "type": {"type": "string"}
            },
            "type": "object"
        },
        "FieldValidator": {
            "properties": {
                "name": {"type": "string"},
                "required": {"type": "boolean"}
            },
            "type": "object"
        },
        "Locale": {
            "description": "placeholder",
            "properties": {},
            "type": "object"
        },
        "Namespace": {
            "properties": {
                "name": {"type": "string"},
                "templateId": {"type": "string"}
            },
            "type": "object"
        },
        "Notification": {
            "properties": {
                "eventType": {
                    "$ref": "#/definitions/EventType",
                    "enum": [
                        "CREATE",
                        "SYNCHRONOUS_UPDATE",
                        "ASYNCHRONOUS_UPDATE",
                        "DEACTIVATE",
                        "DATA_EXPIRATION"
                    ],
                    "type": "string"
                },
                "notifierId": {"type": "string"},
                "notifierType": {
                    "$ref": "#/definitions/NotifierType",
                    "enum": [
                        "EMAIL",
                        "HTTP",
                        "SYSTEM_OUT",
                        "NEXTERNAL"
                    ],
                    "type": "string"
                },
                "requestId": {"type": "string"},
                "responseId": {"type": "string"},
                "success": {"type": "boolean"},
                "timestamp": {
                    "format": "long",
                    "type": "number"
                },
                "verificationResponseResultCode": {
                    "$ref": "#/definitions/VerificationResponseResultCode",
                    "enum": [
                        "DISAPPROVED",
                        "APPROVED",
                        "VERIFICATION_SOURCE_UNAVAILABLE",
                        "INSUFFICIENT_DATA",
                        "EXPIRED",
                        "REVOKED",
                        "NOT_APPROVED",
                        "INCONCLUSIVE"
                    ],
                    "type": "string"
                },
                "verificationStatus": {
                    "$ref": "#/definitions/VerificationStatus",
                    "enum": [
                        "NEW",
                        "OPEN",
                        "PENDING",
                        "COMPLETE"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "NotificationEmail": {
            "properties": {
                "address": {"type": "string"},
                "eventType": {
                    "$ref": "#/definitions/EventType",
                    "enum": [
                        "CREATE",
                        "SYNCHRONOUS_UPDATE",
                        "ASYNCHRONOUS_UPDATE",
                        "DEACTIVATE",
                        "DATA_EXPIRATION"
                    ],
                    "type": "string"
                },
                "notifierId": {"type": "string"},
                "notifierType": {
                    "$ref": "#/definitions/NotifierType",
                    "enum": [
                        "EMAIL",
                        "HTTP",
                        "SYSTEM_OUT",
                        "NEXTERNAL"
                    ],
                    "type": "string"
                },
                "requestId": {"type": "string"},
                "responseId": {"type": "string"},
                "subject": {"type": "string"},
                "success": {"type": "boolean"},
                "timestamp": {
                    "format": "long",
                    "type": "number"
                },
                "verificationResponseResultCode": {
                    "$ref": "#/definitions/VerificationResponseResultCode",
                    "enum": [
                        "DISAPPROVED",
                        "APPROVED",
                        "VERIFICATION_SOURCE_UNAVAILABLE",
                        "INSUFFICIENT_DATA",
                        "EXPIRED",
                        "REVOKED",
                        "NOT_APPROVED",
                        "INCONCLUSIVE"
                    ],
                    "type": "string"
                },
                "verificationStatus": {
                    "$ref": "#/definitions/VerificationStatus",
                    "enum": [
                        "NEW",
                        "OPEN",
                        "PENDING",
                        "COMPLETE"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "NotificationHttp": {
            "properties": {
                "eventType": {
                    "$ref": "#/definitions/EventType",
                    "enum": [
                        "CREATE",
                        "SYNCHRONOUS_UPDATE",
                        "ASYNCHRONOUS_UPDATE",
                        "DEACTIVATE",
                        "DATA_EXPIRATION"
                    ],
                    "type": "string"
                },
                "notifierId": {"type": "string"},
                "notifierType": {
                    "$ref": "#/definitions/NotifierType",
                    "enum": [
                        "EMAIL",
                        "HTTP",
                        "SYSTEM_OUT",
                        "NEXTERNAL"
                    ],
                    "type": "string"
                },
                "requestId": {"type": "string"},
                "responseId": {"type": "string"},
                "statusCode": {
                    "format": "integer",
                    "type": "number"
                },
                "success": {"type": "boolean"},
                "timestamp": {
                    "format": "long",
                    "type": "number"
                },
                "url": {"type": "string"},
                "verificationResponseResultCode": {
                    "$ref": "#/definitions/VerificationResponseResultCode",
                    "enum": [
                        "DISAPPROVED",
                        "APPROVED",
                        "VERIFICATION_SOURCE_UNAVAILABLE",
                        "INSUFFICIENT_DATA",
                        "EXPIRED",
                        "REVOKED",
                        "NOT_APPROVED",
                        "INCONCLUSIVE"
                    ],
                    "type": "string"
                },
                "verificationStatus": {
                    "$ref": "#/definitions/VerificationStatus",
                    "enum": [
                        "NEW",
                        "OPEN",
                        "PENDING",
                        "COMPLETE"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "Notifier": {
            "properties": {
                "config": {"type": "string"},
                "filters": {
                    "items": {"$ref": "#/definitions/NotifierFilter"},
                    "type": "array"
                },
                "id": {"type": "string"},
                "tags": {
                    "items": {"type": "string"},
                    "type": "array"
                },
                "type": {"type": "string"}
            },
            "type": "object"
        },
        "NotifierFilter": {
            "properties": {
                "eventType": {
                    "$ref": "#/definitions/EventType",
                    "enum": [
                        "CREATE",
                        "SYNCHRONOUS_UPDATE",
                        "ASYNCHRONOUS_UPDATE",
                        "DEACTIVATE",
                        "DATA_EXPIRATION"
                    ],
                    "type": "string"
                },
                "result": {
                    "$ref": "#/definitions/VerificationResult",
                    "enum": [
                        "TRUE",
                        "FALSE",
                        "UNKNOWN"
                    ],
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/VerificationStatus",
                    "enum": [
                        "NEW",
                        "OPEN",
                        "PENDING",
                        "COMPLETE"
                    ],
                    "type": "string"
                },
                "templateId": {"type": "string"},
                "tier": {
                    "format": "integer",
                    "type": "number"
                },
                "verificationType": {
                    "$ref": "#/definitions/VerificationType",
                    "enum": [
                        "HONOR_SYSTEM",
                        "VALIDATION",
                        "IP_ADDRESS",
                        "EMAIL_LOOP",
                        "AUTHORITATIVE",
                        "SSO",
                        "ASSET_REVIEW"
                    ],
                    "type": "string"
                },
                "verificationTypeOfRecord": {
                    "$ref": "#/definitions/VerificationType",
                    "enum": [
                        "HONOR_SYSTEM",
                        "VALIDATION",
                        "IP_ADDRESS",
                        "EMAIL_LOOP",
                        "AUTHORITATIVE",
                        "SSO",
                        "ASSET_REVIEW"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "NotifierType": {
            "enum": [
                "EMAIL",
                "HTTP"
            ],
            "type": "string"
        },
        "Organization": {
            "properties": {
                "accountId": {"type": "string"},
                "active": {"type": "boolean"},
                "aliases": {
                    "items": {"type": "string"},
                    "type": "array"
                },
                "city": {"type": "string"},
                "country": {"type": "string"},
                "emailDomains": {
                    "items": {"type": "string"},
                    "type": "array"
                },
                "id": {
                    "format": "long",
                    "type": "number"
                },
                "ips": {
                    "items": {"type": "string"},
                    "type": "array"
                },
                "name": {"type": "string"},
                "state": {"type": "string"},
                "street": {"type": "string"},
                "tags": {
                    "items": {"type": "string"},
                    "type": "array"
                },
                "type": {
                    "$ref": "#/definitions/OrganizationType",
                    "enum": [
                        "UNIVERSITY",
                        "MEMBERSHIP",
                        "MILITARY",
                        "FIRST_RESPONDER",
                        "MEDICAL",
                        "NON_PROFIT",
                        "CORPORATE",
                        "K12"
                    ],
                    "type": "string"
                },
                "zip": {"type": "string"}
            },
            "type": "object"
        },
        "OrganizationParameter": {
            "enum": [
                "aliases",
                "city",
                "countryCode",
                "emailDomains",
                "id",
                "ips",
                "lenientNameMatch",
                "matchName",
                "name",
                "phone",
                "source",
                "stateCode",
                "street",
                "street2",
                "tags",
                "type",
                "zip"
            ],
            "type": "string"
        },
        "OrganizationType": {
            "enum": [
                "CORPORATE",
                "FIRST_RESPONDER",
                "K12",
                "MEDICAL",
                "MEMBERSHIP",
                "MILITARY",
                "NON_PROFIT",
                "UNIVERSITY"
            ],
            "type": "string"
        },
        "Person": {
            "properties": {"fields": {"type": "string"}},
            "type": "object"
        },
        "PersonFieldAccessor": {
            "description": "placeholder",
            "properties": {},
            "type": "object"
        },
        "Range": {
            "properties": {
                "max": {
                    "format": "long",
                    "type": "number"
                },
                "min": {
                    "format": "long",
                    "type": "number"
                }
            },
            "type": "object"
        },
        "ReferenceToken": {
            "properties": {
                "expires": {
                    "format": "long",
                    "type": "number"
                },
                "reference": {"type": "string"},
                "token": {"type": "string"}
            },
            "type": "object"
        },
        "Report": {
            "properties": {
                "id": {"type": "string"},
                "requestTimestamp": {
                    "format": "long",
                    "type": "number"
                },
                "status": {
                    "$ref": "#/definitions/ReportStatus",
                    "enum": [
                        "CREATED",
                        "REPORTING",
                        "COMPLETE",
                        "ERROR"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "ReportBreakdown": {
            "properties": {
                "accountId": {"type": "string"},
                "count": {
                    "format": "long",
                    "type": "number"
                },
                "date": {"type": "string"},
                "error": {"type": "string"},
                "organizationType": {"type": "string"},
                "result": {"type": "string"},
                "verificationType": {"type": "string"}
            },
            "type": "object"
        },
        "ReportStatus": {
            "enum": [
                "COMPLETE",
                "CREATED",
                "ERROR",
                "REPORTING"
            ],
            "type": "string"
        },
        "ResultWrapper": {
            "properties": {"result": {"type": "boolean"}},
            "type": "object"
        },
        "Reward": {
            "properties": {
                "data": {"type": "string"},
                "id": {"type": "string"},
                "name": {"type": "string"}
            },
            "type": "object"
        },
        "RewardPool": {
            "properties": {
                "id": {"type": "string"},
                "name": {"type": "string"},
                "warnThreshold": {
                    "format": "integer",
                    "type": "number"
                }
            },
            "type": "object"
        },
        "RewardPoolEntryResult": {
            "properties": {"entriesAdded": {
                "format": "integer",
                "type": "number"
            }},
            "type": "object"
        },
        "RewardPoolWithStats": {
            "properties": {
                "id": {"type": "string"},
                "name": {"type": "string"},
                "remainingEntries": {
                    "format": "integer",
                    "type": "number"
                },
                "totalEntries": {
                    "format": "integer",
                    "type": "number"
                },
                "warnThreshold": {
                    "format": "integer",
                    "type": "number"
                }
            },
            "type": "object"
        },
        "SearchResult": {
            "properties": {
                "results": {
                    "items": {"type": "object"},
                    "type": "array"
                },
                "totalCount": {
                    "format": "integer",
                    "type": "number"
                }
            },
            "type": "object"
        },
        "Statement": {
            "properties": {
                "fieldType": {"type": "string"},
                "id": {"type": "string"},
                "label": {"type": "string"},
                "operator": {"type": "string"},
                "value": {"type": "string"}
            },
            "type": "object"
        },
        "Symbology": {
            "enum": [
                "CODE_128",
                "ITF",
                "PDF417",
                "QR",
                "UPC_A"
            ],
            "type": "string"
        },
        "TaskStatus": {
            "enum": [
                "COMPLETED",
                "ESCALATED",
                "IN_PROGRESS",
                "ON_HOLD",
                "PENDING"
            ],
            "type": "string"
        },
        "ThinOrganization": {
            "properties": {
                "id": {
                    "format": "long",
                    "type": "number"
                },
                "name": {"type": "string"}
            },
            "type": "object"
        },
        "ThinOrganizationWithLocation": {
            "properties": {
                "city": {"type": "string"},
                "id": {
                    "format": "long",
                    "type": "number"
                },
                "name": {"type": "string"},
                "state": {"type": "string"},
                "zip": {"type": "string"}
            },
            "type": "object"
        },
        "Token": {
            "properties": {"token": {"type": "string"}},
            "type": "object"
        },
        "TokenState": {
            "enum": [
                "ACTIVE",
                "EXPIRED",
                "USED"
            ],
            "type": "string"
        },
        "URLReference": {
            "properties": {
                "name": {"type": "string"},
                "url": {"type": "string"}
            },
            "type": "object"
        },
        "User": {
            "properties": {
                "accountId": {"type": "string"},
                "email": {"type": "string"},
                "firstName": {"type": "string"},
                "friendlyName": {"type": "string"},
                "id": {"type": "string"},
                "lastName": {"type": "string"},
                "roles": {
                    "enum": [
                        "ACCOUNT_OWNER",
                        "CONFIGURATION_ADMIN",
                        "DEVELOPER",
                        "MICROCENTER_ADMIN",
                        "PRODUCTION_USER",
                        "PUPPET_MASTER",
                        "PUPPET",
                        "PURGER",
                        "REPORTER",
                        "RESOURCE_MANAGER",
                        "REST_USER",
                        "REVIEWER",
                        "REVIEWER_ADMIN",
                        "REVIEWER_MANAGER",
                        "REVIEW_REPORTER",
                        "REWARD_ADMIN",
                        "STAFF_REVIEW_REPORTER",
                        "STAFF",
                        "TEMPLATE_ADMIN",
                        "USER",
                        "USER_ADMIN",
                        "BULK_VERIFIER",
                        "PERSON_DATA",
                        "MSHUP",
                        "ORGANIZATION_MANAGER",
                        "PROMOTION_MANAGER",
                        "CUSTOMER_SERVICE",
                        "TRIAL_USER"
                    ],
                    "items": {"$ref": "#/definitions/UserRole"},
                    "type": "array"
                },
                "username": {"type": "string"}
            },
            "type": "object"
        },
        "UserRole": {
            "enum": [
                "CUSTOMER_SERVICE",
                "ORGANIZATION_MANAGER",
                "PROMOTION_MANAGER",
                "REPORTER",
                "RESOURCE_MANAGER",
                "REVIEWER",
                "REVIEWER_MANAGER",
                "REVIEW_REPORTER",
                "REWARD_ADMIN",
                "TEMPLATE_ADMIN",
                "USER_ADMIN"
            ],
            "type": "string"
        },
        "VerificationError": {
            "description": "placeholder",
            "properties": {},
            "type": "object"
        },
        "VerificationRequest": {
            "properties": {
                "active": {
                    "enum": [
                        "true",
                        "false",
                        "null"
                    ],
                    "type": "boolean"
                },
                "assetMap": {"type": "string"},
                "config": {
                    "$ref": "#/definitions/VerificationRequestConfig",
                    "type": "string"
                },
                "expirationDate": {
                    "format": "long",
                    "type": "number"
                },
                "metadata": {"type": "string"},
                "organization": {
                    "$ref": "#/definitions/Organization",
                    "type": "string"
                },
                "personId": {"type": "string"},
                "revisions": {
                    "format": "integer",
                    "type": "number"
                },
                "timestamp": {
                    "format": "long",
                    "type": "number"
                },
                "userId": {"type": "string"}
            },
            "type": "object"
        },
        "VerificationRequestConfig": {
            "properties": {
                "affiliationTypes": {
                    "enum": [
                        "STUDENT_COLLEGE_BOUND",
                        "STUDENT_FULL_TIME",
                        "STUDENT_PART_TIME",
                        "GRADUATE",
                        "ALUMNUS",
                        "FACULTY",
                        "EMPLOYEE",
                        "RESELLER",
                        "NON_PROFIT",
                        "ACTIVE_DUTY",
                        "VETERAN",
                        "RESERVIST",
                        "MILITARY_FAMILY",
                        "MILITARY_RETIREE",
                        "DISABLED_VETERAN",
                        "CIVILIAN_EMPLOYEE",
                        "FIREFIGHTER",
                        "POLICE",
                        "EMT",
                        "NURSE",
                        "MEMBER",
                        "CUSTOMER",
                        "OWNER",
                        "BUSINESS",
                        "BUSINESS_CONTACT",
                        "CONTRACTOR"
                    ],
                    "items": {"$ref": "#/definitions/AffiliationType"},
                    "type": "array"
                },
                "assetTypes": {
                    "enum": [
                        "ID_CARD",
                        "DATED_ID_CARD",
                        "OFFICIAL_LETTER",
                        "OTHER",
                        "PAY_STUB",
                        "ACCEPTANCE_LETTER",
                        "CLASS_SCHEDULE",
                        "TRANSCRIPT",
                        "TUITION_RECEIPT",
                        "REGISTRATION_RECEIPT",
                        "INSURANCE_CARD",
                        "DD214",
                        "IRS_SCHEDULE_G_FORM_1120",
                        "IRS_SCHEDULE_K1_FORM_1120S",
                        "IRS_SCHEDULE_K1_FORM_1065",
                        "IRS_SCHEDULE_C_OR_CEZ_PAGE_1",
                        "IRS_SCHEDULE_B1_FORM_1065",
                        "REPORT_CARD",
                        "DBA_REGISTRATION",
                        "BUSINESS_TAX_FORM_PAGE1",
                        "ARTICLES_OF_INCORPORATION",
                        "SECRETARY_OF_STATE_FILING",
                        "VENDOR_STATEMENT",
                        "LEASE_AGREEMENT",
                        "LETTER_OF_AUTHORIZATION",
                        "POWER_OF_ATTORNEY"
                    ],
                    "items": {"$ref": "#/definitions/AssetType"},
                    "type": "array"
                },
                "consolationRewardIds": {
                    "items": {"type": "string"},
                    "type": "array"
                },
                "locale": {
                    "$ref": "#/definitions/Locale",
                    "type": "string"
                },
                "metadata": {
                    "description": "Shim to return VerificationModel logic name in metadata when overridden so that it does not get reverted on template update",
                    "type": "string"
                },
                "notifierIds": {
                    "items": {"type": "string"},
                    "type": "array"
                },
                "rewardIds": {
                    "items": {"type": "string"},
                    "type": "array"
                },
                "verificationTypes": {
                    "enum": [
                        "HONOR_SYSTEM",
                        "VALIDATION",
                        "IP_ADDRESS",
                        "EMAIL_LOOP",
                        "AUTHORITATIVE",
                        "SSO",
                        "ASSET_REVIEW"
                    ],
                    "items": {"$ref": "#/definitions/VerificationType"},
                    "type": "array"
                }
            },
            "type": "object"
        },
        "VerificationRequestTemplate": {
            "properties": {
                "active": {"type": "boolean"},
                "begins": {
                    "format": "long",
                    "type": "number"
                },
                "config": {
                    "$ref": "#/definitions/VerificationRequestConfig",
                    "type": "string"
                },
                "created": {
                    "format": "long",
                    "type": "number"
                },
                "expires": {
                    "format": "long",
                    "type": "number"
                },
                "id": {"type": "string"},
                "metadata": {"type": "string"},
                "name": {"type": "string"}
            },
            "type": "object"
        },
        "VerificationResponse": {
            "properties": {
                "affiliations": {
                    "items": {"$ref": "#/definitions/Affiliation"},
                    "type": "array"
                },
                "errors": {
                    "items": {"$ref": "#/definitions/Error"},
                    "type": "array"
                },
                "inactiveAffiliations": {
                    "items": {"$ref": "#/definitions/Affiliation"},
                    "type": "array"
                },
                "metadata": {"type": "string"},
                "request": {
                    "$ref": "#/definitions/VerificationRequest",
                    "type": "string"
                },
                "requestId": {"type": "string"},
                "result": {
                    "enum": [
                        "true",
                        "false",
                        "null"
                    ],
                    "type": "boolean"
                },
                "status": {
                    "$ref": "#/definitions/VerificationStatus",
                    "enum": [
                        "NEW",
                        "OPEN",
                        "PENDING",
                        "COMPLETE"
                    ],
                    "type": "string"
                },
                "timestamp": {
                    "format": "long",
                    "type": "number"
                }
            },
            "type": "object"
        },
        "VerificationResponseResultCode": {
            "enum": [
                "APPROVED",
                "DISAPPROVED",
                "EXPIRED",
                "INCONCLUSIVE",
                "INSUFFICIENT_DATA",
                "NOT_APPROVED",
                "REVOKED",
                "VERIFICATION_SOURCE_UNAVAILABLE"
            ],
            "type": "string"
        },
        "VerificationResult": {
            "enum": [
                "FALSE",
                "TRUE",
                "UNKNOWN"
            ],
            "type": "string"
        },
        "VerificationStatus": {
            "enum": [
                "COMPLETE",
                "NEW",
                "OPEN",
                "PENDING"
            ],
            "type": "string"
        },
        "VerificationType": {
            "enum": [
                "ASSET_REVIEW",
                "AUTHORITATIVE",
                "EMAIL_LOOP",
                "HONOR_SYSTEM",
                "IP_ADDRESS",
                "SSO",
                "VALIDATION"
            ],
            "type": "string"
        },
        "VerificationUserResponse": {
            "properties": {"type": {"type": "string"}},
            "type": "object"
        },
        "VerificationUserResponseData": {
            "properties": {
                "data": {"type": "string"},
                "type": {"type": "string"}
            },
            "type": "object"
        },
        "VerificationUserResponseResult": {
            "properties": {
                "data": {"type": "boolean"},
                "type": {"type": "string"}
            },
            "type": "object"
        },
        "VerificationUserResponseUploadToken": {
            "properties": {
                "data": {
                    "$ref": "#/definitions/Token",
                    "type": "string"
                },
                "type": {"type": "string"}
            },
            "type": "object"
        },
        "certificationresponsefromrequestid": {
            "description": "placeholder",
            "properties": {},
            "type": "object"
        },
        "dummy": {
            "description": "placeholder",
            "properties": {},
            "type": "object"
        }
    },
    "info": {
        "description": "Instant eligibility verification",
        "title": "SheerID REST API",
        "version": "0.5"
    },
    "paths": {
        "/account/delegated": {"get": {
            "consumes": [],
            "description": "Returns a list of accounts that delegate tasks of the provided type to the requesting account",
            "operationId": "getDelegatedAccounts",
            "parameters": [{
                "description": "the type of task being delegated",
                "in": "query",
                "name": "taskType",
                "required": true,
                "type": "string"
            }],
            "produces": ["application/json"],
            "responses": {"200": {
                "description": "A list of [Account](#!/definitions/Account) objects",
                "schema": {"$ref": "#/definitions/Account"}
            }},
            "summary": "Get Delegated Accounts",
            "tags": ["Account"]
        }},
        "/account/mine": {"get": {
            "consumes": [],
            "description": "Get the authenticated account id for this session.",
            "operationId": "getLoggedInAccount",
            "parameters": [],
            "produces": [],
            "responses": {"200": {
                "description": "`302` redirect to [Get Account](#!/Account/getAccount) for the currently-authenticated account",
                "schema": {"$ref": "#/definitions/dummy"}
            }},
            "summary": "Get Logged In Account",
            "tags": ["Account"]
        }},
        "/account/secretToken": {
            "delete": {
                "consumes": [],
                "description": "Delete the current Secret Token causing a new token to be issued.",
                "operationId": "regenerateSecretToken",
                "parameters": [],
                "produces": ["application/json"],
                "responses": {"200": {
                    "description": "A single [ResultWrapper](#!/definitions/ResultWrapper) object",
                    "schema": {"$ref": "#/definitions/ResultWrapper"}
                }},
                "summary": "Regenerate Secret Token",
                "tags": ["Account"]
            },
            "get": {
                "consumes": [],
                "description": "Get the current Secret Token.",
                "operationId": "getSecretToken",
                "parameters": [],
                "produces": ["application/json"],
                "responses": {"200": {
                    "description": "A single [Token](#!/definitions/Token) object",
                    "schema": {"$ref": "#/definitions/Token"}
                }},
                "summary": "Get Secret Token",
                "tags": ["Account"]
            }
        },
        "/account/{accountId}": {
            "delete": {
                "consumes": [],
                "description": "Delete an account.  All the subusers of the account will be deleted as well.",
                "operationId": "deleteAccount",
                "parameters": [{
                    "description": "",
                    "in": "path",
                    "name": "accountId",
                    "required": true,
                    "type": "string"
                }],
                "produces": ["application/json"],
                "responses": {"200": {
                    "description": "A single [Account](#!/definitions/Account) object",
                    "schema": {"$ref": "#/definitions/Account"}
                }},
                "summary": "Delete Account",
                "tags": ["Account"]
            },
            "get": {
                "consumes": [],
                "description": "Retrieve an account object with fields accessible by the requestor.",
                "operationId": "getAccount",
                "parameters": [{
                    "description": "",
                    "in": "path",
                    "name": "accountId",
                    "required": true,
                    "type": "string"
                }],
                "produces": ["application/json"],
                "responses": {"200": {
                    "description": "A single [Account](#!/definitions/Account) object",
                    "schema": {"$ref": "#/definitions/Account"}
                }},
                "summary": "Get Account",
                "tags": ["Account"]
            }
        },
        "/account/{accountId}/users": {"get": {
            "consumes": [],
            "description": "List the users in an account.",
            "operationId": "listUsers",
            "parameters": [{
                "description": "",
                "in": "path",
                "name": "accountId",
                "required": true,
                "type": "string"
            }],
            "produces": ["application/json"],
            "responses": {"200": {
                "description": "A list of [User](#!/definitions/User) objects",
                "schema": {"$ref": "#/definitions/User"}
            }},
            "summary": "List Users",
            "tags": ["Account"]
        }},
        "/affiliationType": {"get": {
            "consumes": [],
            "description": "Obtain a list of affiliation types, optionally filtered by organization type.",
            "operationId": "listAffiliationTypes",
            "parameters": [{
                "$ref": "#/definitions/OrganizationType",
                "description": "an organization type, as described by [List Organization Types](#!/OrganizationType/listOrganizationTypes)",
                "enum": [
                    "CORPORATE",
                    "FIRST_RESPONDER",
                    "K12",
                    "MEDICAL",
                    "MEMBERSHIP",
                    "MILITARY",
                    "NON_PROFIT",
                    "UNIVERSITY"
                ],
                "in": "query",
                "name": "organizationType",
                "required": false,
                "type": "string"
            }],
            "produces": ["application/json"],
            "responses": {"200": {
                "description": "A list of strings",
                "schema": {"$ref": "#/definitions/dummy"}
            }},
            "summary": "List Affiliation Types",
            "tags": ["AffiliationType"]
        }},
        "/asset": {"post": {
            "consumes": ["multipart/form-data"],
            "description": "Upload an asset.",
            "operationId": "upload",
            "parameters": [
                {
                    "description": "one or more files, with parameter keys prefixed by `file` (Ex: `file0`, `file1`...). File type must be one of our [supported MIME types](http://developer.sheerid.com/asset-mime-types/).",
                    "in": "formData",
                    "name": "file",
                    "required": false,
                    "type": "file"
                },
                {
                    "description": "a valid asset token obtained from [Issue Token](#!/Asset/issueToken)",
                    "in": "formData",
                    "name": "token",
                    "required": true,
                    "type": "string"
                },
                {
                    "default": "true",
                    "description": "to merge multiple documents into one when possible",
                    "in": "formData",
                    "name": "mergeMultipleDocuments",
                    "required": false,
                    "type": "boolean"
                },
                {
                    "description": "the type of document the user is uploading",
                    "enum": [
                        "ACCEPTANCE_LETTER",
                        "ARTICLES_OF_INCORPORATION",
                        "BUSINESS_TAX_FORM_PAGE1",
                        "CLASS_SCHEDULE",
                        "DATED_ID_CARD",
                        "DBA_REGISTRATION",
                        "DD214",
                        "ID_CARD",
                        "INSURANCE_CARD",
                        "IRS_SCHEDULE_B1_FORM_1065",
                        "IRS_SCHEDULE_C_OR_CEZ_PAGE_1",
                        "IRS_SCHEDULE_G_FORM_1120",
                        "IRS_SCHEDULE_K1_FORM_1065",
                        "IRS_SCHEDULE_K1_FORM_1120S",
                        "LEASE_AGREEMENT",
                        "LETTER_OF_AUTHORIZATION",
                        "OFFICIAL_LETTER",
                        "OTHER",
                        "PAY_STUB",
                        "POWER_OF_ATTORNEY",
                        "REGISTRATION_RECEIPT",
                        "REPORT_CARD",
                        "SECRETARY_OF_STATE_FILING",
                        "TRANSCRIPT",
                        "TUITION_RECEIPT",
                        "VENDOR_STATEMENT"
                    ],
                    "in": "formData",
                    "name": "assetType",
                    "required": false,
                    "type": "string"
                },
                {
                    "description": "free form text to provide additional details of assetType",
                    "in": "formData",
                    "name": "assetTypeDescription",
                    "required": false,
                    "type": "string"
                },
                {
                    "description": "A URL to which the request will be redirected upon a successful upload.  If omitted, will not redirect upon success.",
                    "in": "formData",
                    "name": "success",
                    "required": false,
                    "type": "string"
                },
                {
                    "description": "A URL to which the request will be redirected upon a failed upload.  If omitted, will not redirect upon failure.",
                    "in": "formData",
                    "name": "failure",
                    "required": false,
                    "type": "string"
                }
            ],
            "produces": ["application/json"],
            "responses": {"200": {
                "description": "A list of [Asset](#!/definitions/Asset) objects",
                "schema": {"$ref": "#/definitions/Asset"}
            }},
            "summary": "Upload",
            "tags": ["Asset"]
        }},
        "/asset/review/queues": {"get": {
            "consumes": [],
            "description": "Get the counts of currently-active asset reviews by category",
            "operationId": "getAssetReviewCounts",
            "parameters": [
                {
                    "description": "",
                    "in": "query",
                    "name": "country",
                    "required": false,
                    "type": "string"
                },
                {
                    "description": "",
                    "in": "query",
                    "name": "language",
                    "required": false,
                    "type": "string"
                }
            ],
            "produces": ["application/json"],
            "responses": {"200": {
                "description": "A map keyed on queue name with values equal to the current number of active assets in each queue",
                "schema": {"$ref": "#/definitions/dummy"}
            }},
            "summary": "Get Asset Review Counts",
            "tags": ["Asset"]
        }},
        "/asset/review/queues/locale": {"get": {
            "consumes": [],
            "description": "Get the counts of available tasks, grouped by Locale",
            "operationId": "countTasksByLocale",
            "parameters": [{
                "$ref": "#/definitions/TaskStatus",
                "default": "PENDING",
                "description": "",
                "enum": [
                    "COMPLETED",
                    "ESCALATED",
                    "IN_PROGRESS",
                    "ON_HOLD",
                    "PENDING"
                ],
                "in": "query",
                "name": "status",
                "required": false,
                "type": "string"
            }],
            "produces": ["application/json"],
            "responses": {"200": {
                "description": "A map keyed on Locale with values equal to the current number of active tasks in each",
                "schema": {"$ref": "#/definitions/dummy"}
            }},
            "summary": "Count Tasks By Locale",
            "tags": ["Asset"]
        }},
        "/asset/review/queues/orgtype": {"get": {
            "consumes": [],
            "description": "Get the counts of available tasks, grouped by Organization Type",
            "operationId": "countTasksByOrganizationType",
            "parameters": [{
                "$ref": "#/definitions/TaskStatus",
                "default": "PENDING",
                "description": "",
                "enum": [
                    "COMPLETED",
                    "ESCALATED",
                    "IN_PROGRESS",
                    "ON_HOLD",
                    "PENDING"
                ],
                "in": "query",
                "name": "status",
                "required": false,
                "type": "string"
            }],
            "produces": ["application/json"],
            "responses": {"200": {
                "description": "A map keyed on review priority with values equal to the current number of active tasks in each",
                "schema": {"$ref": "#/definitions/dummy"}
            }},
            "summary": "Count Tasks By Organization Type",
            "tags": ["Asset"]
        }},
        "/asset/review/queues/priority": {"get": {
            "consumes": [],
            "description": "Get the counts of available tasks, grouped by priority",
            "operationId": "countTasksByPriority",
            "parameters": [{
                "$ref": "#/definitions/TaskStatus",
                "default": "PENDING",
                "description": "",
                "enum": [
                    "COMPLETED",
                    "ESCALATED",
                    "IN_PROGRESS",
                    "ON_HOLD",
                    "PENDING"
                ],
                "in": "query",
                "name": "status",
                "required": false,
                "type": "string"
            }],
            "produces": ["application/json"],
            "responses": {"200": {
                "description": "A map keyed on review priority with values equal to the current number of active tasks in each",
                "schema": {"$ref": "#/definitions/dummy"}
            }},
            "summary": "Count Tasks By Priority",
            "tags": ["Asset"]
        }},
        "/asset/token": {"post": {
            "consumes": [],
            "description": "Issue a token to facilitate an Asset upload via [Upload](#!/Asset/upload).",
            "operationId": "issueToken",
            "parameters": [
                {
                    "description": "the identifier of the request to which the Assets will be attached",
                    "in": "formData",
                    "name": "requestId",
                    "required": true,
                    "type": "string"
                },
                {
                    "default": "86400000",
                    "description": "time (in milliseconds) before the token expires (default: 1 day)",
                    "format": "long",
                    "in": "formData",
                    "name": "lifespan",
                    "required": false,
                    "type": "number"
                }
            ],
            "produces": ["application/json"],
            "responses": {"200": {
                "description": "A single [ExpiringToken](#!/definitions/ExpiringToken) object",
                "schema": {"$ref": "#/definitions/ExpiringToken"}
            }},
            "summary": "Issue Token",
            "tags": ["Asset"]
        }},
        "/asset/token/{token}": {"delete": {
            "consumes": [],
            "deprecated": true,
            "description": "Revoke a token, making it immediately invalid.",
            "operationId": "revokeToken",
            "parameters": [{
                "description": "the token to revoke",
                "in": "path",
                "name": "token",
                "required": true,
                "type": "string"
            }],
            "produces": [],
            "responses": {"200": {
                "description": "TODO",
                "schema": {"$ref": "#/definitions/dummy"}
            }},
            "summary": "Revoke Token",
            "tags": ["Asset"]
        }},
        "/asset/{assetId}": {
            "get": {
                "consumes": [],
                "description": "Retrieve an asset's metadata.",
                "operationId": "retrieveAsset",
                "parameters": [{
                    "description": "the id of the asset to retrieve",
                    "in": "path",
                    "name": "assetId",
                    "required": true,
                    "type": "string"
                }],
                "produces": ["application/json"],
                "responses": {"200": {
                    "description": "A single [Asset](#!/definitions/Asset) object",
                    "schema": {"$ref": "#/definitions/Asset"}
                }},
                "summary": "Retrieve Asset",
                "tags": ["Asset"]
            },
            "put": {
                "consumes": [],
                "description": "Review an Asset.",
                "operationId": "reviewAsset",
                "parameters": [
                    {
                        "description": "Asset ID.",
                        "in": "path",
                        "name": "assetId",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Asset status.",
                        "enum": [
                            "ACCEPTED",
                            "PENDING_REVIEW",
                            "REJECTED"
                        ],
                        "in": "formData",
                        "name": "status",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Asset type.",
                        "enum": [
                            "ACCEPTANCE_LETTER",
                            "ARTICLES_OF_INCORPORATION",
                            "BUSINESS_TAX_FORM_PAGE1",
                            "CLASS_SCHEDULE",
                            "DATED_ID_CARD",
                            "DBA_REGISTRATION",
                            "DD214",
                            "ID_CARD",
                            "INSURANCE_CARD",
                            "IRS_SCHEDULE_B1_FORM_1065",
                            "IRS_SCHEDULE_C_OR_CEZ_PAGE_1",
                            "IRS_SCHEDULE_G_FORM_1120",
                            "IRS_SCHEDULE_K1_FORM_1065",
                            "IRS_SCHEDULE_K1_FORM_1120S",
                            "LEASE_AGREEMENT",
                            "LETTER_OF_AUTHORIZATION",
                            "OFFICIAL_LETTER",
                            "OTHER",
                            "PAY_STUB",
                            "POWER_OF_ATTORNEY",
                            "REGISTRATION_RECEIPT",
                            "REPORT_CARD",
                            "SECRETARY_OF_STATE_FILING",
                            "TRANSCRIPT",
                            "TUITION_RECEIPT",
                            "VENDOR_STATEMENT"
                        ],
                        "in": "formData",
                        "name": "type",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Asset Type description.",
                        "in": "formData",
                        "name": "assetTypeDescription",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "collectionFormat": "multi",
                        "description": "Asset verification errors.",
                        "in": "formData",
                        "items": {"type": "string"},
                        "name": "errors",
                        "required": false,
                        "type": "array"
                    }
                ],
                "produces": [],
                "responses": {"200": {
                    "description": "TODO",
                    "schema": {"$ref": "#/definitions/dummy"}
                }},
                "summary": "Review Asset",
                "tags": ["Asset"]
            }
        },
        "/asset/{assetId}/raw": {"get": {
            "consumes": [],
            "description": "Retrieve an asset in its original format.",
            "operationId": "getAssetData",
            "parameters": [
                {
                    "description": "the id of the asset to retrieve",
                    "in": "path",
                    "name": "assetId",
                    "required": true,
                    "type": "string"
                },
                {
                    "default": "false",
                    "description": "`true` to set `Content-Disposition: inline` header (so the data can be viewed in a browser if applicable), will use `Content-Disposition: attachment` by default.",
                    "in": "query",
                    "name": "inline",
                    "required": false,
                    "type": "boolean"
                }
            ],
            "produces": ["*/*"],
            "responses": {"200": {
                "description": "the raw asset data in its original format",
                "schema": {"$ref": "#/definitions/dummy"}
            }},
            "summary": "Get Asset Data",
            "tags": ["Asset"]
        }},
        "/asset/{assetId}/review/statement": {"get": {
            "consumes": [],
            "description": "Generate field-level assertions used to perform review of documents, based on the type of asset chosen.",
            "operationId": "getAssetStatements",
            "parameters": [
                {
                    "description": "the id of an asset that will be reviewed",
                    "in": "path",
                    "name": "assetId",
                    "required": true,
                    "type": "string"
                },
                {
                    "$ref": "#/definitions/AssetType",
                    "description": "the type of asset that has been uploaded",
                    "enum": [
                        "ACCEPTANCE_LETTER",
                        "ARTICLES_OF_INCORPORATION",
                        "BUSINESS_TAX_FORM_PAGE1",
                        "CLASS_SCHEDULE",
                        "DATED_ID_CARD",
                        "DBA_REGISTRATION",
                        "DD214",
                        "ID_CARD",
                        "INSURANCE_CARD",
                        "IRS_SCHEDULE_B1_FORM_1065",
                        "IRS_SCHEDULE_C_OR_CEZ_PAGE_1",
                        "IRS_SCHEDULE_G_FORM_1120",
                        "IRS_SCHEDULE_K1_FORM_1065",
                        "IRS_SCHEDULE_K1_FORM_1120S",
                        "LEASE_AGREEMENT",
                        "LETTER_OF_AUTHORIZATION",
                        "OFFICIAL_LETTER",
                        "OTHER",
                        "PAY_STUB",
                        "POWER_OF_ATTORNEY",
                        "REGISTRATION_RECEIPT",
                        "REPORT_CARD",
                        "SECRETARY_OF_STATE_FILING",
                        "TRANSCRIPT",
                        "TUITION_RECEIPT",
                        "VENDOR_STATEMENT"
                    ],
                    "in": "query",
                    "name": "assetType",
                    "required": false,
                    "type": "string"
                }
            ],
            "produces": [],
            "responses": {"200": {
                "description": "A list of [Statement](#!/definitions/Statement) objects",
                "schema": {"$ref": "#/definitions/Statement"}
            }},
            "summary": "Get Asset Statements",
            "tags": ["Asset"]
        }},
        "/assetType": {"get": {
            "consumes": [],
            "description": "Obtain a list of asset types.",
            "operationId": "listAssetTypes",
            "parameters": [{
                "$ref": "#/definitions/OrganizationType",
                "description": "",
                "enum": [
                    "CORPORATE",
                    "FIRST_RESPONDER",
                    "K12",
                    "MEDICAL",
                    "MEMBERSHIP",
                    "MILITARY",
                    "NON_PROFIT",
                    "UNIVERSITY"
                ],
                "in": "query",
                "name": "organizationType",
                "required": false,
                "type": "string"
            }],
            "produces": ["application/json"],
            "responses": {"200": {
                "description": "A list of strings",
                "schema": {"$ref": "#/definitions/dummy"}
            }},
            "summary": "List Asset Types",
            "tags": ["AssetType"]
        }},
        "/barcode/{symbology}/{data}-{width}x{height}.png": {"get": {
            "consumes": [],
            "description": "Obtain a barcode in image format",
            "operationId": "getBarcode",
            "parameters": [
                {
                    "description": "a supported barcode symbology",
                    "enum": [
                        "CODE_128",
                        "ITF",
                        "PDF417",
                        "QR",
                        "UPC_A"
                    ],
                    "in": "path",
                    "name": "symbology",
                    "required": true,
                    "schema": {"$ref": "#/definitions/Symbology"},
                    "type": "string"
                },
                {
                    "description": "numeric or textual data that is appropriate to be represented in the given symbology",
                    "in": "path",
                    "name": "data",
                    "required": true,
                    "type": "string"
                },
                {
                    "description": "the preferred pixel width of the barcode image. For 1D barcodes this value is ignored.",
                    "format": "integer",
                    "in": "path",
                    "name": "width",
                    "required": true,
                    "type": "number"
                },
                {
                    "description": "the preferred pixel height of the barcode image. For barcodes with longer data the resulting image may be taller than requested in order to present a readable code.",
                    "format": "integer",
                    "in": "path",
                    "name": "height",
                    "required": true,
                    "type": "number"
                }
            ],
            "produces": ["image/png"],
            "responses": {"200": {
                "description": "a barcode in image (PNG) format",
                "schema": {"$ref": "#/definitions/dummy"}
            }},
            "summary": "Get Barcode",
            "tags": ["Barcode"]
        }},
        "/certification": {
            "get": {
                "consumes": [],
                "description": "Attempts to locate one or more certification requests/responses supplying specific strict-matching criteria",
                "operationId": "search",
                "parameters": [
                    {
                        "description": "",
                        "in": "query",
                        "name": "accountId",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "default": "false",
                        "description": "",
                        "in": "query",
                        "name": "includeRequests",
                        "required": false,
                        "type": "boolean"
                    }
                ],
                "produces": ["application/json"],
                "responses": {"200": {
                    "description": "A list of [CertificationResponse](#!/definitions/CertificationResponse) objects",
                    "schema": {"$ref": "#/definitions/CertificationResponse"}
                }},
                "summary": "Search",
                "tags": ["Certification"]
            },
            "post": {
                "consumes": ["application/x-www-form-urlencoded"],
                "description": "Perform a certification request",
                "operationId": "certify",
                "parameters": [
                    {
                        "default": "true",
                        "description": "`true` to certify the attribute target, `false` otherwise (default: `true`)",
                        "in": "formData",
                        "name": "_certifyAttributeTarget",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "description": "fully-qualified identifier for the attribute being certified",
                        "in": "formData",
                        "name": "attribute.definition.identifier",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "value for the specified attribute property",
                        "in": "formData",
                        "name": "attribute.property._{propertyName}_",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "metadata value for the supplied key (ex: `:orderId=179365`)",
                        "in": "formData",
                        "name": "_metadata key (any string prefixed with `:`)_",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": ["application/json"],
                "responses": {"200": {
                    "description": "A single [CertificationResponse](#!/definitions/CertificationResponse) object",
                    "schema": {"$ref": "#/definitions/CertificationResponse"}
                }},
                "summary": "Certify",
                "tags": ["Certification"]
            }
        },
        "/certification/search": {"post": {
            "consumes": [],
            "description": "Attempts to locate one or more certification requests/responses supplying specific strict-matching criteria (using a JSON post rather than form fields)",
            "operationId": "searchWithPost",
            "parameters": [],
            "produces": ["application/json"],
            "responses": {"200": {
                "description": "A list of [CertificationResponse](#!/definitions/CertificationResponse) objects",
                "schema": {"$ref": "#/definitions/CertificationResponse"}
            }},
            "summary": "Search With Post",
            "tags": ["Certification"]
        }},
        "/certification/{requestId}": {"get": {
            "consumes": [],
            "description": "Retrieve the response for a requestId.",
            "operationId": "inquire",
            "parameters": [{
                "description": "",
                "in": "path",
                "name": "requestId",
                "required": true,
                "schema": {"$ref": "#/definitions/certificationresponsefromrequestid"},
                "type": "string"
            }],
            "produces": ["application/json"],
            "responses": {"200": {
                "description": "A single [CertificationResponse](#!/definitions/CertificationResponse) object",
                "schema": {"$ref": "#/definitions/CertificationResponse"}
            }},
            "summary": "Inquire",
            "tags": ["Certification"]
        }},
        "/challenge": {"get": {
            "consumes": [],
            "description": "Obtain a list of challenge questions to answer in order to complete a verification.\n This endpoint should be used if a previous verification attempt indicates that the answers to challenge questions are required",
            "operationId": "getChallengeQuestions",
            "parameters": [{
                "description": "identifier of the verification request that indicates challenge question answers are necessary",
                "in": "query",
                "name": "requestId",
                "required": true,
                "type": "string"
            }],
            "produces": ["application/json"],
            "responses": {"200": {
                "description": "A single [ChallengeQuestionSet](#!/definitions/ChallengeQuestionSet) object",
                "schema": {"$ref": "#/definitions/ChallengeQuestionSet"}
            }},
            "summary": "Get Challenge Questions",
            "tags": ["Challenge"]
        }},
        "/challenge/{challengeQuestionSetId}": {"post": {
            "consumes": [],
            "description": "Submit answers to a list of challenge questions",
            "operationId": "answerChallengeQuestions",
            "parameters": [
                {
                    "description": "the identifier of the question set obtained in [Get Challenge Questions](#!/Challenge/getChallengeQuestions)",
                    "in": "path",
                    "name": "challengeQuestionSetId",
                    "required": true,
                    "type": "string"
                },
                {
                    "description": "the user-selected answer for the corresponding question",
                    "in": "formData",
                    "name": "_each question ID from the challenge question set_",
                    "required": false,
                    "type": "string"
                }
            ],
            "produces": ["application/json"],
            "responses": {"200": {
                "description": "A single [VerificationResponse](#!/definitions/VerificationResponse) object",
                "schema": {"$ref": "#/definitions/VerificationResponse"}
            }},
            "summary": "Answer Challenge Questions",
            "tags": ["Challenge"]
        }},
        "/coupon": {"get": {
            "consumes": [],
            "description": "List all of an account's current coupons",
            "operationId": "listCoupons",
            "parameters": [],
            "produces": ["application/json"],
            "responses": {"200": {
                "description": "A list of [Coupon](#!/definitions/Coupon) objects",
                "schema": {"$ref": "#/definitions/Coupon"}
            }},
            "summary": "List Coupons",
            "tags": ["Coupon"]
        }},
        "/coupon/{couponId}": {"get": {
            "consumes": [],
            "description": "Retrieve an existing coupon",
            "operationId": "getCoupon",
            "parameters": [{
                "description": "the identifier of a coupon",
                "in": "path",
                "name": "couponId",
                "required": true,
                "type": "string"
            }],
            "produces": ["application/json"],
            "responses": {"200": {
                "description": "A single [Coupon](#!/definitions/Coupon) object",
                "schema": {"$ref": "#/definitions/Coupon"}
            }},
            "summary": "Get Coupon",
            "tags": ["Coupon"]
        }},
        "/coupon/{couponId}/redeem": {"post": {
            "consumes": [],
            "description": "Increment redemption count of a coupon",
            "operationId": "redeemCoupon",
            "parameters": [{
                "description": "the identifier of a coupon",
                "in": "path",
                "name": "couponId",
                "required": true,
                "type": "string"
            }],
            "produces": ["application/json"],
            "responses": {"200": {
                "description": "A single [Coupon](#!/definitions/Coupon) object",
                "schema": {"$ref": "#/definitions/Coupon"}
            }},
            "summary": "Redeem Coupon",
            "tags": ["Coupon"]
        }},
        "/coupon/{couponId}/restore": {"post": {
            "consumes": [],
            "description": "Decrement redemption count of a coupon",
            "operationId": "restoreCoupon",
            "parameters": [{
                "description": "the identifier of a coupon",
                "in": "path",
                "name": "couponId",
                "required": true,
                "type": "string"
            }],
            "produces": ["application/json"],
            "responses": {"200": {
                "description": "A single [Coupon](#!/definitions/Coupon) object",
                "schema": {"$ref": "#/definitions/Coupon"}
            }},
            "summary": "Restore Coupon",
            "tags": ["Coupon"]
        }},
        "/dataset": {
            "get": {
                "consumes": [],
                "description": "List all datasets",
                "operationId": "listDatasets",
                "parameters": [],
                "produces": ["application/json"],
                "responses": {"200": {
                    "description": "A list of [Dataset](#!/definitions/Dataset) objects",
                    "schema": {"$ref": "#/definitions/Dataset"}
                }},
                "summary": "List Datasets",
                "tags": ["Dataset"]
            },
            "post": {
                "consumes": ["application/x-www-form-urlencoded"],
                "description": "Create a new dataset to use for verification",
                "operationId": "createDataset",
                "parameters": [
                    {
                        "description": "a reference name for this dataset",
                        "in": "formData",
                        "name": "name",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "collectionFormat": "multi",
                        "description": "a list of fields that will be used to define a unique dataset entry",
                        "in": "formData",
                        "items": {"type": "string"},
                        "name": "fields",
                        "required": false,
                        "type": "array"
                    },
                    {
                        "collectionFormat": "multi",
                        "description": "",
                        "in": "formData",
                        "items": {"type": "string"},
                        "name": "orgParameters",
                        "required": false,
                        "type": "array"
                    },
                    {
                        "description": "an optional organization id, see [List Organizations](#!/Organization/listOrganizations)",
                        "format": "long",
                        "in": "formData",
                        "name": "organizationId",
                        "required": false,
                        "type": "number"
                    },
                    {
                        "description": "an organization name supplied when the ID is not known. If `organizationId` is supplied, this parameter is ignored.",
                        "in": "formData",
                        "name": "organizationName",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "an organization type (see [List Organization Types](#!/OrganizationType/listOrganizationTypes)) to help when matching the organization name.  If `organizationId` is supplied or `organizationName` is not supplied, this parameter is ignored.",
                        "enum": [
                            "CORPORATE",
                            "FIRST_RESPONDER",
                            "K12",
                            "MEDICAL",
                            "MEMBERSHIP",
                            "MILITARY",
                            "NON_PROFIT",
                            "UNIVERSITY"
                        ],
                        "in": "formData",
                        "name": "organizationType",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "default": "true",
                        "description": "`false` to disable matching of organizationName. If `organizationId` is supplied or `organizationName` is not supplied, this parameter is ignored.",
                        "in": "formData",
                        "name": "matchName",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "description": "the type of affiliation represented by this dataset, will be added to the verification response upon successful match",
                        "enum": [
                            "ACTIVE_DUTY",
                            "ALUMNUS",
                            "BUSINESS",
                            "BUSINESS_CONTACT",
                            "CIVILIAN_EMPLOYEE",
                            "CONTRACTOR",
                            "CUSTOMER",
                            "DISABLED_VETERAN",
                            "EMPLOYEE",
                            "EMT",
                            "FACULTY",
                            "FIREFIGHTER",
                            "GRADUATE",
                            "MEMBER",
                            "MILITARY_FAMILY",
                            "MILITARY_RETIREE",
                            "NON_PROFIT",
                            "NURSE",
                            "OWNER",
                            "POLICE",
                            "RESELLER",
                            "RESERVIST",
                            "STUDENT_COLLEGE_BOUND",
                            "STUDENT_FULL_TIME",
                            "STUDENT_PART_TIME",
                            "VETERAN"
                        ],
                        "in": "formData",
                        "name": "affiliationType",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": ["application/json"],
                "responses": {"200": {
                    "description": "A single [Dataset](#!/definitions/Dataset) object",
                    "schema": {"$ref": "#/definitions/Dataset"}
                }},
                "summary": "Create Dataset",
                "tags": ["Dataset"]
            }
        },
        "/dataset/{datasetId}": {
            "delete": {
                "consumes": [],
                "description": "Delete a dataset",
                "operationId": "deleteDataset",
                "parameters": [{
                    "description": "the identifier of the dataset to remove",
                    "in": "path",
                    "name": "datasetId",
                    "required": true,
                    "type": "string"
                }],
                "produces": [],
                "responses": {"200": {
                    "description": "TODO",
                    "schema": {"$ref": "#/definitions/dummy"}
                }},
                "summary": "Delete Dataset",
                "tags": ["Dataset"]
            },
            "get": {
                "consumes": [],
                "description": "Retrieve a single dataset by ID",
                "operationId": "retrieveDataset",
                "parameters": [{
                    "description": "the identifier of the dataset to retrieve",
                    "in": "path",
                    "name": "datasetId",
                    "required": true,
                    "type": "string"
                }],
                "produces": ["application/json"],
                "responses": {"200": {
                    "description": "A single [DatasetWithStats](#!/definitions/DatasetWithStats) object",
                    "schema": {"$ref": "#/definitions/DatasetWithStats"}
                }},
                "summary": "Retrieve Dataset",
                "tags": ["Dataset"]
            },
            "post": {
                "consumes": [],
                "description": "Locate a dataset entry",
                "operationId": "findEntry",
                "parameters": [
                    {
                        "description": "the identifier of the dataset within which to search",
                        "in": "path",
                        "name": "datasetId",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "An email address, preferably the one issued by the organization being verified",
                        "in": "formData",
                        "name": "EMAIL",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Given name of the verification subject",
                        "in": "formData",
                        "name": "FIRST_NAME",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Surname/family name of the verification subject",
                        "in": "formData",
                        "name": "LAST_NAME",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Complete birth date of the verification subject",
                        "format": "date",
                        "in": "formData",
                        "name": "BIRTH_DATE",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "The date on which the affiliation being verified began. For VETERAN, this is the date of discharge/end of active duty status.",
                        "format": "date",
                        "in": "formData",
                        "name": "STATUS_START_DATE",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": ["application/json"],
                "responses": {"200": {
                    "description": "A single [DatasetEntry](#!/definitions/DatasetEntry) object",
                    "schema": {"$ref": "#/definitions/DatasetEntry"}
                }},
                "summary": "Find Entry",
                "tags": ["Dataset"]
            }
        },
        "/dataset/{datasetId}/entries": {
            "post": {
                "consumes": ["text/csv"],
                "description": "Create dataset entries with streaming approach",
                "operationId": "createDatasetEntries",
                "parameters": [
                    {
                        "description": "the dataset id",
                        "in": "path",
                        "name": "datasetId",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "1000",
                        "description": "size of chunk to submit to service",
                        "format": "integer",
                        "in": "formData",
                        "name": "chunkSize",
                        "required": false,
                        "type": "number"
                    }
                ],
                "produces": ["application/json"],
                "responses": {"200": {
                    "description": "the number of entries created",
                    "schema": {"$ref": "#/definitions/dummy"}
                }},
                "summary": "Create Dataset Entries",
                "tags": ["Dataset"]
            },
            "put": {
                "consumes": ["text/csv"],
                "description": "Replace all dataset entries with new entries using a streaming approach",
                "operationId": "replaceDatasetEntries",
                "parameters": [
                    {
                        "description": "the dataset id",
                        "in": "path",
                        "name": "datasetId",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "1000",
                        "description": "size of chunk to submit to service",
                        "format": "integer",
                        "in": "formData",
                        "name": "chunkSize",
                        "required": false,
                        "type": "number"
                    }
                ],
                "produces": ["application/json"],
                "responses": {"200": {
                    "description": "the number of entries created",
                    "schema": {"$ref": "#/definitions/dummy"}
                }},
                "summary": "Replace Dataset Entries",
                "tags": ["Dataset"]
            }
        },
        "/dataset/{datasetId}/entry": {"post": {
            "consumes": ["application/x-www-form-urlencoded"],
            "description": "Add a single dataset entry",
            "operationId": "createDatasetEntry",
            "parameters": [
                {
                    "description": "the identifier of an existing dataset to which entries should be added",
                    "in": "path",
                    "name": "datasetId",
                    "required": true,
                    "type": "string"
                },
                {
                    "description": "An email address, preferably the one issued by the organization being verified",
                    "in": "formData",
                    "name": "EMAIL",
                    "required": false,
                    "type": "string"
                },
                {
                    "description": "Given name of the verification subject",
                    "in": "formData",
                    "name": "FIRST_NAME",
                    "required": false,
                    "type": "string"
                },
                {
                    "description": "Surname/family name of the verification subject",
                    "in": "formData",
                    "name": "LAST_NAME",
                    "required": false,
                    "type": "string"
                },
                {
                    "description": "Complete birth date of the verification subject",
                    "format": "date",
                    "in": "formData",
                    "name": "BIRTH_DATE",
                    "required": false,
                    "type": "string"
                },
                {
                    "description": "The date on which the affiliation being verified began. For VETERAN, this is the date of discharge/end of active duty status.",
                    "format": "date",
                    "in": "formData",
                    "name": "STATUS_START_DATE",
                    "required": false,
                    "type": "string"
                },
                {
                    "description": "metadata value for the supplied key (ex: `:orderId=179365`)",
                    "in": "formData",
                    "name": "_metadata key (any string prefixed with `:`)_",
                    "required": false,
                    "type": "string"
                },
                {
                    "description": "the organizationId to which this entry pertains, required if not set globally for this dataset",
                    "format": "long",
                    "in": "formData",
                    "name": "organizationId",
                    "required": false,
                    "type": "number"
                },
                {
                    "description": "the affiliation type of this entry, required if not set globally for this dataset",
                    "enum": [
                        "ACTIVE_DUTY",
                        "ALUMNUS",
                        "BUSINESS",
                        "BUSINESS_CONTACT",
                        "CIVILIAN_EMPLOYEE",
                        "CONTRACTOR",
                        "CUSTOMER",
                        "DISABLED_VETERAN",
                        "EMPLOYEE",
                        "EMT",
                        "FACULTY",
                        "FIREFIGHTER",
                        "GRADUATE",
                        "MEMBER",
                        "MILITARY_FAMILY",
                        "MILITARY_RETIREE",
                        "NON_PROFIT",
                        "NURSE",
                        "OWNER",
                        "POLICE",
                        "RESELLER",
                        "RESERVIST",
                        "STUDENT_COLLEGE_BOUND",
                        "STUDENT_FULL_TIME",
                        "STUDENT_PART_TIME",
                        "VETERAN"
                    ],
                    "in": "formData",
                    "name": "affiliationType",
                    "required": false,
                    "type": "string"
                },
                {
                    "description": "a date upon which this entry is no longer valid",
                    "format": "date",
                    "in": "formData",
                    "name": "expirationDate",
                    "required": false,
                    "type": "string"
                }
            ],
            "produces": ["application/json"],
            "responses": {"200": {
                "description": "A single [DatasetEntry](#!/definitions/DatasetEntry) object",
                "schema": {"$ref": "#/definitions/DatasetEntry"}
            }},
            "summary": "Create Dataset Entry",
            "tags": ["Dataset"]
        }},
        "/field": {"get": {
            "consumes": [],
            "description": "Obtain a list of fields which can be supplied as inputs to [Verify](#!/Verification/verify).",
            "operationId": "listFields",
            "parameters": [],
            "produces": ["application/json"],
            "responses": {"200": {
                "description": "A list of strings",
                "schema": {"$ref": "#/definitions/dummy"}
            }},
            "summary": "List Fields",
            "tags": ["Field"]
        }},
        "/namespace": {"get": {
            "consumes": [],
            "description": "List an account's claimed namespaces, optionally filtered by template",
            "operationId": "listNamespaces",
            "parameters": [{
                "description": "if supplied, will limit results to just those associated with the specified template",
                "in": "query",
                "name": "templateId",
                "required": false,
                "type": "string"
            }],
            "produces": ["application/json"],
            "responses": {"200": {
                "description": "A list of [Namespace](#!/definitions/Namespace) objects",
                "schema": {"$ref": "#/definitions/Namespace"}
            }},
            "summary": "List Namespaces",
            "tags": ["Namespace"]
        }},
        "/namespace/{name}": {
            "delete": {
                "consumes": [],
                "description": "Release a namespace and its template mapping.\n The namespace will not be immediately available to other accounts, giving its former owner an opportunity to re-claim it before others have the opportunity.",
                "operationId": "releaseNamespace",
                "parameters": [{
                    "description": "the namespace to release",
                    "in": "path",
                    "name": "name",
                    "required": true,
                    "type": "string"
                }],
                "produces": [],
                "responses": {"200": {
                    "description": "TODO",
                    "schema": {"$ref": "#/definitions/dummy"}
                }},
                "summary": "Release Namespace",
                "tags": ["Namespace"]
            },
            "get": {
                "consumes": [],
                "description": "Get a specific namespace by name.",
                "operationId": "retrieveNamespace",
                "parameters": [{
                    "description": "the name to retrieve",
                    "in": "path",
                    "name": "name",
                    "required": true,
                    "type": "string"
                }],
                "produces": ["application/json"],
                "responses": {"200": {
                    "description": "A single [Namespace](#!/definitions/Namespace) object",
                    "schema": {"$ref": "#/definitions/Namespace"}
                }},
                "summary": "Retrieve Namespace",
                "tags": ["Namespace"]
            },
            "put": {
                "consumes": [],
                "description": "Claim a namespace and map it to a template.",
                "operationId": "mapNamespace",
                "parameters": [
                    {
                        "description": "the name to map",
                        "in": "path",
                        "name": "name",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "the ID of a template to map this name to",
                        "in": "formData",
                        "name": "templateId",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "false",
                        "description": "to allow remapping even when namespace is in use",
                        "in": "formData",
                        "name": "allowRemapping",
                        "required": false,
                        "type": "boolean"
                    }
                ],
                "produces": ["application/json"],
                "responses": {"200": {
                    "description": "A single [Namespace](#!/definitions/Namespace) object",
                    "schema": {"$ref": "#/definitions/Namespace"}
                }},
                "summary": "Map Namespace",
                "tags": ["Namespace"]
            }
        },
        "/notifier": {
            "get": {
                "consumes": [],
                "description": "List existing notifiers, optionally filtered by tag.",
                "operationId": "listNotifiers",
                "parameters": [
                    {
                        "description": "a single tag upon which to filter the list of notifiers",
                        "in": "query",
                        "name": "tag",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "$ref": "#/definitions/NotifierType",
                        "description": "a type of either HTTP or EMAIL",
                        "enum": [
                            "EMAIL",
                            "HTTP"
                        ],
                        "in": "query",
                        "name": "type",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": ["application/json"],
                "responses": {"200": {
                    "description": "A list of [Notifier](#!/definitions/Notifier) objects",
                    "schema": {"$ref": "#/definitions/Notifier"}
                }},
                "summary": "List Notifiers",
                "tags": ["Notifier"]
            },
            "post": {
                "consumes": [],
                "description": "Add a notifier.",
                "operationId": "addNotifier",
                "parameters": [
                    {
                        "description": "the type of notifier to add, currently supported: `EMAIL`, `HTTP`",
                        "in": "formData",
                        "name": "type",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "collectionFormat": "multi",
                        "description": "optional tag(s) to organize your notifiers",
                        "in": "formData",
                        "items": {"type": "string"},
                        "name": "tag",
                        "required": false,
                        "type": "array"
                    },
                    {
                        "collectionFormat": "multi",
                        "description": "Notification filters",
                        "in": "formData",
                        "items": {"type": "string"},
                        "name": "filters",
                        "required": false,
                        "type": "array"
                    },
                    {
                        "description": "key/value pairs which define configuration options for the notifier",
                        "in": "formData",
                        "name": "_various_",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": ["application/json"],
                "responses": {"200": {
                    "description": "A single [Notifier](#!/definitions/Notifier) object",
                    "schema": {"$ref": "#/definitions/Notifier"}
                }},
                "summary": "Add Notifier",
                "tags": ["Notifier"]
            }
        },
        "/notifier/verification/{requestId}/{eventTypeName}": {"post": {
            "consumes": [],
            "description": "Trigger a verification request change event that will fire the applicable configured notifiers.",
            "operationId": "triggerVerificationEvent",
            "parameters": [
                {
                    "description": "the identifier of an existing request for which to fire the event",
                    "in": "path",
                    "name": "requestId",
                    "required": true,
                    "type": "string"
                },
                {
                    "description": "the type of event to simulate",
                    "enum": [
                        "ASYNCHRONOUS_UPDATE",
                        "CREATE",
                        "DATA_EXPIRATION",
                        "DEACTIVATE",
                        "SYNCHRONOUS_UPDATE"
                    ],
                    "in": "path",
                    "name": "eventTypeName",
                    "required": true,
                    "schema": {"$ref": "#/definitions/EventType"},
                    "type": "string"
                }
            ],
            "produces": [],
            "responses": {"200": {
                "description": "TODO",
                "schema": {"$ref": "#/definitions/dummy"}
            }},
            "summary": "Trigger Verification Event",
            "tags": ["Notifier"]
        }},
        "/notifier/{notifierId}": {
            "delete": {
                "consumes": [],
                "description": "Delete a notifier.",
                "operationId": "removeNotifier",
                "parameters": [{
                    "description": "the id of a notifier to remove",
                    "in": "path",
                    "name": "notifierId",
                    "required": true,
                    "type": "string"
                }],
                "produces": [],
                "responses": {"200": {
                    "description": "TODO",
                    "schema": {"$ref": "#/definitions/dummy"}
                }},
                "summary": "Remove Notifier",
                "tags": ["Notifier"]
            },
            "get": {
                "consumes": [],
                "description": "Retrieve a notifier by its identifier.",
                "operationId": "retrieveNotifier",
                "parameters": [{
                    "description": "the identifier of an existing notifier",
                    "in": "path",
                    "name": "notifierId",
                    "required": true,
                    "type": "string"
                }],
                "produces": ["application/json"],
                "responses": {"200": {
                    "description": "A single [Notifier](#!/definitions/Notifier) object",
                    "schema": {"$ref": "#/definitions/Notifier"}
                }},
                "summary": "Retrieve Notifier",
                "tags": ["Notifier"]
            },
            "post": {
                "consumes": [],
                "description": "Update notifier",
                "operationId": "updateNotifier",
                "parameters": [
                    {
                        "description": "The id of the notifier to be updated",
                        "in": "path",
                        "name": "notifierId",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "collectionFormat": "multi",
                        "description": "optional tag(s) to organize your notifiers",
                        "in": "formData",
                        "items": {"type": "string"},
                        "name": "tag",
                        "required": false,
                        "type": "array"
                    },
                    {
                        "collectionFormat": "multi",
                        "description": "Notification filters",
                        "in": "formData",
                        "items": {"type": "string"},
                        "name": "filters",
                        "required": false,
                        "type": "array"
                    },
                    {
                        "description": "key/value pairs which define configuration options for the notifier",
                        "in": "formData",
                        "name": "_various_",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": ["application/json"],
                "responses": {"200": {
                    "description": "A single [Notifier](#!/definitions/Notifier) object",
                    "schema": {"$ref": "#/definitions/Notifier"}
                }},
                "summary": "Update Notifier",
                "tags": ["Notifier"]
            }
        },
        "/notifier/{notifierId}/fire": {"post": {
            "consumes": [],
            "description": "Explicitly invoke a notifier.\n Useful for testing purposes or to replay a notification.",
            "operationId": "fireNotifier",
            "parameters": [
                {
                    "description": "the identifier of the notifier to fire",
                    "in": "path",
                    "name": "notifierId",
                    "required": true,
                    "type": "string"
                },
                {
                    "description": "the identifier of an existing request upon which to base this notifier's context",
                    "in": "formData",
                    "name": "requestId",
                    "required": false,
                    "type": "string"
                },
                {
                    "description": "the type of event to simulate",
                    "enum": [
                        "ASYNCHRONOUS_UPDATE",
                        "CREATE",
                        "DATA_EXPIRATION",
                        "DEACTIVATE",
                        "SYNCHRONOUS_UPDATE"
                    ],
                    "in": "formData",
                    "name": "eventType",
                    "required": false,
                    "type": "string"
                }
            ],
            "produces": [],
            "responses": {"200": {
                "description": "TODO",
                "schema": {"$ref": "#/definitions/dummy"}
            }},
            "summary": "Fire Notifier",
            "tags": ["Notifier"]
        }},
        "/oauth/{oauthProviderId}/data": {"get": {
            "consumes": [],
            "description": "**Obtain a dataset used to populate fields in a verifying application**",
            "operationId": "oauthVerify",
            "parameters": [
                {
                    "description": "the provider name used to obtain the auth token",
                    "in": "path",
                    "name": "oauthProviderId",
                    "required": true,
                    "type": "string"
                },
                {
                    "description": "the code obtained from the authorization API call, in lieu of a sessionToken, if the call should obtain the session token in an OAuth2 workflow prior to requesting profile data",
                    "in": "query",
                    "name": "code",
                    "required": false,
                    "type": "string"
                },
                {
                    "description": "",
                    "in": "query",
                    "name": "sessionToken",
                    "required": false,
                    "type": "string"
                },
                {
                    "description": "",
                    "in": "query",
                    "name": "URL",
                    "required": false,
                    "type": "string"
                }
            ],
            "produces": ["application/json"],
            "responses": {"200": {
                "description": "a basic JSON object with key-value pairs of source data to be used to auto-populate fields in the requesting verifying app/page",
                "schema": {"$ref": "#/definitions/dummy"}
            }},
            "summary": "Oauth Verify",
            "tags": ["OAuthSource"]
        }},
        "/oauth/{oauthProviderId}/session": {"get": {
            "consumes": [],
            "description": "**Obtain an OAuth2 token using code obtained from authorization request**",
            "operationId": "oauthRequestSession",
            "parameters": [
                {
                    "description": "the provider name used to obtain the auth token",
                    "in": "path",
                    "name": "oauthProviderId",
                    "required": true,
                    "type": "string"
                },
                {
                    "description": "the code obtained from the authorization API call",
                    "in": "query",
                    "name": "code",
                    "required": false,
                    "type": "string"
                },
                {
                    "description": "",
                    "in": "query",
                    "name": "URL",
                    "required": false,
                    "type": "string"
                }
            ],
            "produces": ["application/json"],
            "responses": {"200": {
                "description": "the session token obtained from the external OAuth2 API",
                "schema": {"$ref": "#/definitions/dummy"}
            }},
            "summary": "Oauth Request Session",
            "tags": ["OAuthSource"]
        }},
        "/organization": {"get": {
            "consumes": [],
            "description": "List organizations, optionally filtered by type.",
            "operationId": "listOrganizations",
            "parameters": [
                {
                    "$ref": "#/definitions/OrganizationType",
                    "collectionFormat": "multi",
                    "description": "an organization type reference, as described by [List Organization Types](#!/OrganizationType/listOrganizationTypes)",
                    "in": "query",
                    "items": {"type": "string"},
                    "name": "type",
                    "required": false,
                    "type": "array"
                },
                {
                    "description": "a name or part of a name used to filter the results (case-insensitive)\n\n\n Example: `carolina` will match University of North Carolina, East Carolina University, etc.",
                    "in": "query",
                    "name": "name",
                    "required": false,
                    "type": "string"
                },
                {
                    "default": "false",
                    "description": "a flag indicating that organization names must start with a given name\n\n\n Example: `east carolina` will match East Carolina University but not University of East Carolina.",
                    "in": "query",
                    "name": "nameStartAnchored",
                    "required": false,
                    "type": "boolean"
                },
                {
                    "description": "filter by city (must be used in conjunction with a state filter)",
                    "in": "query",
                    "name": "city",
                    "required": false,
                    "type": "string"
                },
                {
                    "description": "filter by state",
                    "in": "query",
                    "name": "state",
                    "required": false,
                    "type": "string"
                },
                {
                    "default": "US",
                    "description": "filter by country",
                    "in": "query",
                    "name": "country",
                    "required": false,
                    "type": "string"
                },
                {
                    "description": "include organizations with this accountId in search",
                    "in": "query",
                    "name": "accountId",
                    "required": false,
                    "type": "string"
                },
                {
                    "default": "false",
                    "description": "filter results by provided accountId",
                    "in": "query",
                    "name": "accountScopeOnly",
                    "required": false,
                    "type": "boolean"
                },
                {
                    "collectionFormat": "multi",
                    "description": "filter results by any of these tags",
                    "in": "query",
                    "items": {"type": "string"},
                    "name": "tag",
                    "required": false,
                    "type": "array"
                },
                {
                    "description": "is a comma delimited list of organizationIds to include",
                    "in": "query",
                    "name": "includeIds",
                    "required": false,
                    "type": "string"
                },
                {
                    "description": "is a comma delimited list of organizationIds to exclude",
                    "in": "query",
                    "name": "excludeIds",
                    "required": false,
                    "type": "string"
                },
                {
                    "default": "true",
                    "description": "a boolean indicating if the query size safeguards should calculate",
                    "in": "query",
                    "name": "validateSearchQuery",
                    "required": false,
                    "type": "boolean"
                }
            ],
            "produces": [
                "application/json",
                "text/csv; charset=utf-8"
            ],
            "responses": {"200": {
                "description": "A list of [Organization](#!/definitions/Organization) objects",
                "schema": {"$ref": "#/definitions/Organization"}
            }},
            "summary": "List Organizations",
            "tags": ["Organization"]
        }},
        "/organization/typeahead": {"get": {
            "consumes": [],
            "description": "Organization search for use in a type-ahead component",
            "operationId": "typeahead",
            "parameters": [
                {
                    "$ref": "#/definitions/OrganizationType",
                    "collectionFormat": "multi",
                    "description": "an organization type reference, as described by [List Organization Types](#!/OrganizationType/listOrganizationTypes)",
                    "in": "query",
                    "items": {"type": "string"},
                    "name": "type",
                    "required": false,
                    "type": "array"
                },
                {
                    "description": "a name or part of a name used to filter the results (case-insensitive)\n\n\n Example: `carolina` will match University of North Carolina, East Carolina University, etc.",
                    "in": "query",
                    "name": "name",
                    "required": false,
                    "type": "string"
                },
                {
                    "default": "false",
                    "description": "a flag indicating that organization names must start with a given name\n\n\n Example: `east carolina` will match East Carolina University but not University of East Carolina.",
                    "in": "query",
                    "name": "nameStartAnchored",
                    "required": false,
                    "type": "boolean"
                },
                {
                    "description": "filter by city (must be used in conjunction with a state filter)",
                    "in": "query",
                    "name": "city",
                    "required": false,
                    "type": "string"
                },
                {
                    "description": "filter by state",
                    "in": "query",
                    "name": "state",
                    "required": false,
                    "type": "string"
                },
                {
                    "default": "US",
                    "description": "filter by country",
                    "in": "query",
                    "name": "country",
                    "required": false,
                    "type": "string"
                },
                {
                    "description": "include organizations with this accountId in search",
                    "in": "query",
                    "name": "accountId",
                    "required": false,
                    "type": "string"
                },
                {
                    "default": "false",
                    "description": "filter results by provided accountId",
                    "in": "query",
                    "name": "accountScopeOnly",
                    "required": false,
                    "type": "boolean"
                },
                {
                    "collectionFormat": "multi",
                    "description": "filter results by any of these tags",
                    "in": "query",
                    "items": {"type": "string"},
                    "name": "tag",
                    "required": false,
                    "type": "array"
                },
                {
                    "default": "false",
                    "description": "`true` to return the organization's city, state, and postal code as available",
                    "in": "query",
                    "name": "includeLocation",
                    "required": false,
                    "type": "boolean"
                }
            ],
            "produces": ["application/json"],
            "responses": {"200": {
                "description": "A list of [ThinOrganization](#!/definitions/ThinOrganization) objects",
                "schema": {"$ref": "#/definitions/ThinOrganization"}
            }},
            "summary": "Typeahead",
            "tags": ["Organization"]
        }},
        "/organization/{organizationId}": {"get": {
            "consumes": [],
            "description": "Retrieves an organization by ID.",
            "operationId": "getOrganization",
            "parameters": [{
                "description": "the ID of an OrganizationEntity to retrieve",
                "format": "long",
                "in": "path",
                "name": "organizationId",
                "required": true,
                "type": "number"
            }],
            "produces": ["application/json"],
            "responses": {"200": {
                "description": "A single [Organization](#!/definitions/Organization) object",
                "schema": {"$ref": "#/definitions/Organization"}
            }},
            "summary": "Get Organization",
            "tags": ["Organization"]
        }},
        "/organizationType": {"get": {
            "consumes": [],
            "description": "Obtain a list of organization types.",
            "operationId": "listOrganizationTypes",
            "parameters": [],
            "produces": ["application/json"],
            "responses": {"200": {
                "description": "A list of strings",
                "schema": {"$ref": "#/definitions/dummy"}
            }},
            "summary": "List Organization Types",
            "tags": ["OrganizationType"]
        }},
        "/ping": {"get": {
            "consumes": [],
            "description": "Check that the server is reachable and that service calls are being properly authenticated.",
            "operationId": "ping",
            "parameters": [],
            "produces": ["text/plain"],
            "responses": {"200": {
                "description": "`pong`",
                "schema": {"$ref": "#/definitions/dummy"}
            }},
            "summary": "Ping",
            "tags": ["Ping"]
        }},
        "/report": {
            "get": {
                "consumes": [],
                "description": "Obtain a list of existing reports.",
                "operationId": "listReports",
                "parameters": [],
                "produces": ["application/json"],
                "responses": {"200": {
                    "description": "A list of [Report](#!/definitions/Report) objects",
                    "schema": {"$ref": "#/definitions/Report"}
                }},
                "summary": "List Reports",
                "tags": ["Report"]
            },
            "post": {
                "consumes": [],
                "description": "Request a report.\n\n When the report has a `COMPLETE` status (as returned by [Retrieve Report](#!/Report/retrieveReport)), you can obtain the report data using [Get Report Data](#!/Report/getReportData).",
                "operationId": "requestReport",
                "parameters": [
                    {
                        "description": "an optional lower bound on request timestamp",
                        "format": "date",
                        "in": "formData",
                        "name": "startDate",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "an optional upper bound on request timestamp",
                        "format": "date",
                        "in": "formData",
                        "name": "endDate",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "a comma-delimited list of request/respsonse metadata keys to include in report",
                        "in": "formData",
                        "name": "metaKeys",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "a comma-delimited list of error codes to filter out of the report",
                        "in": "formData",
                        "name": "errorsToFilter",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "a comma-delimited list of verification statuses to include",
                        "in": "formData",
                        "name": "statuses",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "include specific named person data fields in report (as a comma-delimited list of field constants from [List Fields](#!/Field/listFields), or `*` to return all available data). Supplied fields are narrowed to match the data access policies for the calling user.",
                        "in": "formData",
                        "name": "fields",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "a number of milliseconds into the past (from the time the report is requested) the report should cover. If `startDate` is supplied, this value is ignored.",
                        "format": "long",
                        "in": "formData",
                        "name": "delta",
                        "required": false,
                        "type": "number"
                    },
                    {
                        "default": "true",
                        "description": "`false` to disable email notification upon completion of report",
                        "in": "formData",
                        "name": "notifyEmail",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "default": "false",
                        "description": "to include metaKeys specified in the account configuration",
                        "in": "formData",
                        "name": "reportingConfigurationIncluded",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "collectionFormat": "multi",
                        "description": "a ID of a template by which to filter requests. If none are specified, will not filter by template. If multiple template IDs are specified, will use OR combination to filter requests.  If template IDs are supplied, the automatic assumption will be that certifications should not be included in the results set, and will override the value of \"includeCertifications\"",
                        "in": "formData",
                        "items": {"type": "string"},
                        "name": "templateId",
                        "required": false,
                        "type": "array"
                    },
                    {
                        "collectionFormat": "multi",
                        "description": "",
                        "in": "formData",
                        "items": {"type": "string"},
                        "name": "bulkBatchId",
                        "required": false,
                        "type": "array"
                    },
                    {
                        "default": "false",
                        "description": "filter results to just verification requests for which a fee is incurred",
                        "in": "formData",
                        "name": "invoiceMode",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "default": "false",
                        "description": "include certifications in the verifications report",
                        "in": "formData",
                        "name": "includeCertifications",
                        "required": false,
                        "type": "boolean"
                    }
                ],
                "produces": ["application/json"],
                "responses": {"200": {
                    "description": "A single [Report](#!/definitions/Report) object",
                    "schema": {"$ref": "#/definitions/Report"}
                }},
                "summary": "Request Report",
                "tags": ["Report"]
            }
        },
        "/report/assetReviewMetrics": {"post": {
            "consumes": [],
            "description": "Get a report of asset review metrics",
            "operationId": "assetReviewMetrics",
            "parameters": [
                {
                    "description": "A set of account ids separated by \",\". Example \"account1,account2,account3\". A null value will return a report for the requesters own accountId",
                    "in": "formData",
                    "name": "accountIds",
                    "required": false,
                    "type": "string"
                },
                {
                    "description": "The date/time for the beginning of the report period",
                    "format": "date",
                    "in": "formData",
                    "name": "startDate",
                    "required": false,
                    "type": "string"
                },
                {
                    "description": "The date/time for the end of the report period",
                    "format": "date",
                    "in": "formData",
                    "name": "endDate",
                    "required": false,
                    "type": "string"
                }
            ],
            "produces": ["application/json"],
            "responses": {"200": {
                "description": "A map of asset review metrics",
                "schema": {"$ref": "#/definitions/dummy"}
            }},
            "summary": "Asset Review Metrics",
            "tags": ["Report"]
        }},
        "/report/{reportId}": {
            "delete": {
                "consumes": [],
                "description": "Delete a report.",
                "operationId": "deleteReport",
                "parameters": [{
                    "description": "the ID of the report to fetch",
                    "in": "path",
                    "name": "reportId",
                    "required": true,
                    "type": "string"
                }],
                "produces": [],
                "responses": {"200": {
                    "description": "TODO",
                    "schema": {"$ref": "#/definitions/dummy"}
                }},
                "summary": "Delete Report",
                "tags": ["Report"]
            },
            "get": {
                "consumes": [],
                "description": "Check the status of a report by its identifier.",
                "operationId": "retrieveReport",
                "parameters": [{
                    "description": "the ID of the report to fetch",
                    "in": "path",
                    "name": "reportId",
                    "required": true,
                    "type": "string"
                }],
                "produces": ["application/json"],
                "responses": {"200": {
                    "description": "A single [Report](#!/definitions/Report) object",
                    "schema": {"$ref": "#/definitions/Report"}
                }},
                "summary": "Retrieve Report",
                "tags": ["Report"]
            }
        },
        "/report/{reportId}/raw": {"get": {
            "consumes": [],
            "description": "Get the raw report data in the requested format.\n\n For a detailed description of the data returned by this method, refer to the [Report Data Descriptions](http://developer.sheerid.com/docs/report.html) documentation.",
            "operationId": "getReportData",
            "parameters": [{
                "description": "the ID of the report to fetch",
                "in": "path",
                "name": "reportId",
                "required": true,
                "type": "string"
            }],
            "produces": ["text/csv; charset=utf-8"],
            "responses": {"200": {
                "description": "the raw contents of the report",
                "schema": {"$ref": "#/definitions/dummy"}
            }},
            "summary": "Get Report Data",
            "tags": ["Report"]
        }},
        "/required_fields": {"get": {
            "consumes": [],
            "description": "Obtain a map of required fields for the specified VerificationTypes.\n If multiple VerificationTypes are specified the list is the union of the individual results.",
            "operationId": "listFields",
            "parameters": [{
                "$ref": "#/definitions/VerificationType",
                "collectionFormat": "multi",
                "description": "",
                "in": "query",
                "items": {"type": "string"},
                "name": "verificationTypes",
                "required": false,
                "type": "array"
            }],
            "produces": ["application/json"],
            "responses": {"200": {
                "description": "A map from AffiliationType to a list of required field objects",
                "schema": {"$ref": "#/definitions/dummy"}
            }},
            "summary": "List Fields",
            "tags": ["RequiredFields"]
        }},
        "/required_fields/template/{templateId}": {"get": {
            "consumes": [],
            "description": "Obtain a map of required fields for the specified Verification Template",
            "operationId": "listFieldsForTemplate",
            "parameters": [{
                "description": "",
                "in": "path",
                "name": "templateId",
                "required": true,
                "type": "string"
            }],
            "produces": ["application/json"],
            "responses": {"200": {
                "description": "A map from AffiliationType to a list of required field objects",
                "schema": {"$ref": "#/definitions/dummy"}
            }},
            "summary": "List Fields For Template",
            "tags": ["RequiredFields"]
        }},
        "/reward": {
            "get": {
                "consumes": [],
                "description": "Obtain a list of existing rewards.",
                "operationId": "listRewards",
                "parameters": [],
                "produces": ["application/json"],
                "responses": {"200": {
                    "description": "A list of [Reward](#!/definitions/Reward) objects",
                    "schema": {"$ref": "#/definitions/Reward"}
                }},
                "summary": "List Rewards",
                "tags": ["Reward"]
            },
            "post": {
                "consumes": [],
                "description": "Create a reward to be distributed upon successful verification.",
                "operationId": "createReward",
                "parameters": [
                    {
                        "description": "a reference name or description for this reward",
                        "in": "formData",
                        "name": "name",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "arbitrary key/value pairs that make up the reward data",
                        "in": "formData",
                        "name": "_various_",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": ["application/json"],
                "responses": {"200": {
                    "description": "A single [Reward](#!/definitions/Reward) object",
                    "schema": {"$ref": "#/definitions/Reward"}
                }},
                "summary": "Create Reward",
                "tags": ["Reward"]
            }
        },
        "/reward/{rewardId}": {
            "delete": {
                "consumes": [],
                "description": "Delete a reward by its id.",
                "operationId": "deleteReward",
                "parameters": [{
                    "description": "the identifier of the reward to be removed",
                    "in": "path",
                    "name": "rewardId",
                    "required": true,
                    "type": "string"
                }],
                "produces": [],
                "responses": {"200": {
                    "description": "TODO",
                    "schema": {"$ref": "#/definitions/dummy"}
                }},
                "summary": "Delete Reward",
                "tags": ["Reward"]
            },
            "get": {
                "consumes": [],
                "description": "Retrieve a reward by its id.",
                "operationId": "retrieveReward",
                "parameters": [{
                    "description": "the identifier of a reward",
                    "in": "path",
                    "name": "rewardId",
                    "required": true,
                    "type": "string"
                }],
                "produces": ["application/json"],
                "responses": {"200": {
                    "description": "A single [Reward](#!/definitions/Reward) object",
                    "schema": {"$ref": "#/definitions/Reward"}
                }},
                "summary": "Retrieve Reward",
                "tags": ["Reward"]
            },
            "put": {
                "consumes": [],
                "description": "Update a reward.",
                "operationId": "updateReward",
                "parameters": [
                    {
                        "description": "the identifier of a reward",
                        "in": "path",
                        "name": "rewardId",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "a reference name or description for this reward",
                        "in": "formData",
                        "name": "name",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "arbitrary key/value pairs that make up the reward data",
                        "in": "formData",
                        "name": "_various_",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": ["application/json"],
                "responses": {"200": {
                    "description": "A single [Reward](#!/definitions/Reward) object",
                    "schema": {"$ref": "#/definitions/Reward"}
                }},
                "summary": "Update Reward",
                "tags": ["Reward"]
            }
        },
        "/rewardPool": {
            "get": {
                "consumes": [],
                "description": "Obtain a list of reward pools.",
                "operationId": "getRewardPools",
                "parameters": [],
                "produces": ["application/json"],
                "responses": {"200": {
                    "description": "A list of [RewardPool](#!/definitions/RewardPool) objects",
                    "schema": {"$ref": "#/definitions/RewardPool"}
                }},
                "summary": "Get Reward Pools",
                "tags": ["RewardPool"]
            },
            "post": {
                "consumes": [],
                "description": "Create a reward pool.\n A reward pool is a group of unique resources that are intended to be distributed to verified end-users. The pool is used\n by the reward service to issue a unique reward to each verified user.  Examples of pooled rewards include single-use promotional\n codes or activation keys.",
                "operationId": "createRewardPool",
                "parameters": [
                    {
                        "description": "a reference name or description for this reward pool",
                        "in": "formData",
                        "name": "name",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "the number of entries at which the system will notify that a pool is running low on entries",
                        "format": "integer",
                        "in": "formData",
                        "name": "warnThreshold",
                        "required": false,
                        "type": "number"
                    }
                ],
                "produces": ["application/json"],
                "responses": {"200": {
                    "description": "A single [RewardPool](#!/definitions/RewardPool) object",
                    "schema": {"$ref": "#/definitions/RewardPool"}
                }},
                "summary": "Create Reward Pool",
                "tags": ["RewardPool"]
            }
        },
        "/rewardPool/{rewardPoolId}": {
            "delete": {
                "consumes": [],
                "description": "Delete a reward pool by its id.",
                "operationId": "deleteRewardPool",
                "parameters": [{
                    "description": "the identifier of the reward pool to be removed",
                    "in": "path",
                    "name": "rewardPoolId",
                    "required": true,
                    "type": "string"
                }],
                "produces": [],
                "responses": {"200": {
                    "description": "TODO",
                    "schema": {"$ref": "#/definitions/dummy"}
                }},
                "summary": "Delete Reward Pool",
                "tags": ["RewardPool"]
            },
            "get": {
                "consumes": [],
                "description": "Retrieve a reward pool by id.",
                "operationId": "retrieveRewardPool",
                "parameters": [{
                    "description": "the identifier of the reward pool to retrieve",
                    "in": "path",
                    "name": "rewardPoolId",
                    "required": true,
                    "type": "string"
                }],
                "produces": ["application/json"],
                "responses": {"200": {
                    "description": "A single [RewardPoolWithStats](#!/definitions/RewardPoolWithStats) object",
                    "schema": {"$ref": "#/definitions/RewardPoolWithStats"}
                }},
                "summary": "Retrieve Reward Pool",
                "tags": ["RewardPool"]
            },
            "post": {
                "consumes": [],
                "description": "Add one or more entries to a reward pool.",
                "operationId": "addEntries",
                "parameters": [
                    {
                        "description": "the identifier of the reward pool to retrieve",
                        "in": "path",
                        "name": "rewardPoolId",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "one or more entries to be added to this reward pool",
                        "in": "formData",
                        "name": "entry",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [],
                "responses": {"200": {
                    "description": "TODO",
                    "schema": {"$ref": "#/definitions/dummy"}
                }},
                "summary": "Add Entries",
                "tags": ["RewardPool"]
            },
            "put": {
                "consumes": [],
                "description": "Update a reward pool.",
                "operationId": "updateRewardPool",
                "parameters": [
                    {
                        "description": "the identifier of the reward pool to retrieve",
                        "in": "path",
                        "name": "rewardPoolId",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "a reference name or description for this reward pool",
                        "in": "formData",
                        "name": "name",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "the number of entries at which the system will notify that a pool is running low on entries",
                        "format": "integer",
                        "in": "formData",
                        "name": "warnThreshold",
                        "required": false,
                        "type": "number"
                    }
                ],
                "produces": ["application/json"],
                "responses": {"200": {
                    "description": "A single [RewardPool](#!/definitions/RewardPool) object",
                    "schema": {"$ref": "#/definitions/RewardPool"}
                }},
                "summary": "Update Reward Pool",
                "tags": ["RewardPool"]
            }
        },
        "/rewardPool/{rewardPoolId}/entries": {
            "delete": {
                "consumes": [],
                "description": "Delete all the entries associated with a reward pool.",
                "operationId": "deleteRewardPoolEntries",
                "parameters": [{
                    "description": "the identifier of the reward pool whose entries will be removed",
                    "in": "path",
                    "name": "rewardPoolId",
                    "required": true,
                    "type": "string"
                }],
                "produces": [],
                "responses": {"200": {
                    "description": "TODO",
                    "schema": {"$ref": "#/definitions/dummy"}
                }},
                "summary": "Delete Reward Pool Entries",
                "tags": ["RewardPool"]
            },
            "post": {
                "consumes": ["multipart/form-data"],
                "description": "Add entries to a reward pool from a CSV file.",
                "operationId": "addCsvEntries",
                "parameters": [
                    {
                        "description": "the identifier of the reward pool to retrieve",
                        "in": "path",
                        "name": "rewardPoolId",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "CSV file content containing one or more entries to be added to this reward pool.",
                        "in": "formData",
                        "name": "data",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "default": "false",
                        "description": "boolean value indicating if the CSV file contains headers",
                        "in": "formData",
                        "name": "header",
                        "required": false,
                        "type": "boolean"
                    }
                ],
                "produces": ["application/json"],
                "responses": {"200": {
                    "description": "A single [RewardPoolEntryResult](#!/definitions/RewardPoolEntryResult) object",
                    "schema": {"$ref": "#/definitions/RewardPoolEntryResult"}
                }},
                "summary": "Add Csv Entries",
                "tags": ["RewardPool"]
            }
        },
        "/template": {"post": {
            "consumes": ["application/x-www-form-urlencoded"],
            "description": "Create a verification request template.",
            "operationId": "createTemplate",
            "parameters": [
                {
                    "description": "a name for this template for reference purposes",
                    "in": "formData",
                    "name": "name",
                    "required": false,
                    "type": "string"
                },
                {
                    "collectionFormat": "multi",
                    "description": "A comma-delimited list of affiliation type names (see [List Affiliation Types](#!/AffiliationType/listAffiliationTypes)). Defines the affiliations the requestor deems acceptable for a given verification. (For example, when attempting to verify that an individual is either a full-time or part-time student: `_affiliationTypes=STUDENT_FULL_TIME,STUDENT_PART_TIME`",
                    "enum": [
                        "ACTIVE_DUTY",
                        "ALUMNUS",
                        "BUSINESS",
                        "BUSINESS_CONTACT",
                        "CIVILIAN_EMPLOYEE",
                        "CONTRACTOR",
                        "CUSTOMER",
                        "DISABLED_VETERAN",
                        "EMPLOYEE",
                        "EMT",
                        "FACULTY",
                        "FIREFIGHTER",
                        "GRADUATE",
                        "MEMBER",
                        "MILITARY_FAMILY",
                        "MILITARY_RETIREE",
                        "NON_PROFIT",
                        "NURSE",
                        "OWNER",
                        "POLICE",
                        "RESELLER",
                        "RESERVIST",
                        "STUDENT_COLLEGE_BOUND",
                        "STUDENT_FULL_TIME",
                        "STUDENT_PART_TIME",
                        "VETERAN"
                    ],
                    "in": "formData",
                    "items": {"type": "string"},
                    "name": "_affiliationTypes",
                    "required": false,
                    "type": "array"
                },
                {
                    "collectionFormat": "multi",
                    "description": "A comma-delimited list of verification type names (see [List Verification Types](#!/VerificationType/listVerificationTypes)). Defines the requestor's list of acceptable techniques that may be used to verify an individual.",
                    "enum": [
                        "ASSET_REVIEW",
                        "AUTHORITATIVE",
                        "EMAIL_LOOP",
                        "HONOR_SYSTEM",
                        "IP_ADDRESS",
                        "SSO",
                        "VALIDATION"
                    ],
                    "in": "formData",
                    "items": {"type": "string"},
                    "name": "_verificationTypes",
                    "required": false,
                    "type": "array"
                },
                {
                    "collectionFormat": "multi",
                    "description": "A comma-delimited list of asset type names (see [List Asset Types](#!/AssetType/listAssetTypes)). Defines the requestor's list of acceptable documents for use with `ASSET_REVIEW` verification types.  If `ASSET_REVIEW` is not an allowable verification type, this configuration is ignored.",
                    "enum": [
                        "ACCEPTANCE_LETTER",
                        "ARTICLES_OF_INCORPORATION",
                        "BUSINESS_TAX_FORM_PAGE1",
                        "CLASS_SCHEDULE",
                        "DATED_ID_CARD",
                        "DBA_REGISTRATION",
                        "DD214",
                        "ID_CARD",
                        "INSURANCE_CARD",
                        "IRS_SCHEDULE_B1_FORM_1065",
                        "IRS_SCHEDULE_C_OR_CEZ_PAGE_1",
                        "IRS_SCHEDULE_G_FORM_1120",
                        "IRS_SCHEDULE_K1_FORM_1065",
                        "IRS_SCHEDULE_K1_FORM_1120S",
                        "LEASE_AGREEMENT",
                        "LETTER_OF_AUTHORIZATION",
                        "OFFICIAL_LETTER",
                        "OTHER",
                        "PAY_STUB",
                        "POWER_OF_ATTORNEY",
                        "REGISTRATION_RECEIPT",
                        "REPORT_CARD",
                        "SECRETARY_OF_STATE_FILING",
                        "TRANSCRIPT",
                        "TUITION_RECEIPT",
                        "VENDOR_STATEMENT"
                    ],
                    "in": "formData",
                    "items": {"type": "string"},
                    "name": "_assetTypes",
                    "required": false,
                    "type": "array"
                },
                {
                    "collectionFormat": "multi",
                    "description": "A comma-delimited list of Reward IDs (see [List Rewards](#!/Reward/listRewards)). Defines any rewards to be issued when an individual is verified.",
                    "in": "formData",
                    "items": {"type": "string"},
                    "name": "_rewardIds",
                    "required": false,
                    "type": "array"
                },
                {
                    "description": "an optional beginning date for this template",
                    "format": "date",
                    "in": "formData",
                    "name": "begins",
                    "required": false,
                    "type": "string"
                },
                {
                    "description": "an optional expiration date for this template",
                    "format": "date",
                    "in": "formData",
                    "name": "expires",
                    "required": false,
                    "type": "string"
                },
                {
                    "default": "true",
                    "description": "a boolean option for the starting template state",
                    "in": "formData",
                    "name": "active",
                    "required": false,
                    "type": "boolean"
                }
            ],
            "produces": ["application/json"],
            "responses": {"200": {
                "description": "A single [VerificationRequestTemplate](#!/definitions/VerificationRequestTemplate) object",
                "schema": {"$ref": "#/definitions/VerificationRequestTemplate"}
            }},
            "summary": "Create Template",
            "tags": ["Template"]
        }},
        "/template/": {"get": {
            "consumes": [],
            "description": "Retrieve a list of verification request templates for the account associated with the authenticated request.",
            "operationId": "listTemplates",
            "parameters": [
                {
                    "default": "false",
                    "description": "`true` to return the extended template configurations",
                    "in": "query",
                    "name": "withMetadata",
                    "required": false,
                    "type": "boolean"
                },
                {
                    "default": "false",
                    "description": "",
                    "in": "query",
                    "name": "merged",
                    "required": false,
                    "type": "boolean"
                }
            ],
            "produces": ["application/json"],
            "responses": {"200": {
                "description": "A list of [VerificationRequestTemplate](#!/definitions/VerificationRequestTemplate) objects",
                "schema": {"$ref": "#/definitions/VerificationRequestTemplate"}
            }},
            "summary": "List Templates",
            "tags": ["Template"]
        }},
        "/template/named/{name}": {"get": {
            "consumes": [],
            "description": "Retrieve an existing verification request template by its namespace.",
            "operationId": "getTemplateByName",
            "parameters": [{
                "description": "an existing template namespace (See [Map Namespace](#!/Namespace/mapNamespace))",
                "in": "path",
                "name": "name",
                "required": true,
                "type": "string"
            }],
            "produces": [],
            "responses": {"200": {
                "description": "`302` redirect to [Get Template](#!/Template/getTemplate) if supplied namespace is mapped to a valid template, `404` otherwise",
                "schema": {"$ref": "#/definitions/dummy"}
            }},
            "summary": "Get Template By Name",
            "tags": ["Template"]
        }},
        "/template/{templateId}": {
            "delete": {
                "consumes": [],
                "description": "Deletes a template.",
                "operationId": "deleteTemplate",
                "parameters": [{
                    "description": "the identifier of an existing verification request template that is to be deleted",
                    "in": "path",
                    "name": "templateId",
                    "required": true,
                    "type": "string"
                }],
                "produces": [],
                "responses": {"200": {
                    "description": "TODO",
                    "schema": {"$ref": "#/definitions/dummy"}
                }},
                "summary": "Delete Template",
                "tags": ["Template"]
            },
            "get": {
                "consumes": [],
                "description": "Retrieve an existing verification request template.",
                "operationId": "getTemplate",
                "parameters": [
                    {
                        "description": "the identifier of a previously created template",
                        "in": "path",
                        "name": "templateId",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "false",
                        "description": "`true` to return the extended template configuration",
                        "in": "query",
                        "name": "withMetadata",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "default": "false",
                        "description": "`true` to also include any extended template configuration that is merged from the template configuration hierarchy",
                        "in": "query",
                        "name": "merged",
                        "required": false,
                        "type": "boolean"
                    }
                ],
                "produces": ["application/json"],
                "responses": {"200": {
                    "description": "A single [VerificationRequestTemplate](#!/definitions/VerificationRequestTemplate) object",
                    "schema": {"$ref": "#/definitions/VerificationRequestTemplate"}
                }},
                "summary": "Get Template",
                "tags": ["Template"]
            },
            "put": {
                "consumes": ["application/x-www-form-urlencoded"],
                "description": "Update an existing verification request template.",
                "operationId": "updateTemplate",
                "parameters": [
                    {
                        "description": "the identifier of a previously created template",
                        "in": "path",
                        "name": "templateId",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "a name for this template for reference purposes",
                        "in": "formData",
                        "name": "name",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "collectionFormat": "multi",
                        "description": "A comma-delimited list of affiliation type names (see [List Affiliation Types](#!/AffiliationType/listAffiliationTypes)). Defines the affiliations the requestor deems acceptable for a given verification. (For example, when attempting to verify that an individual is either a full-time or part-time student: `_affiliationTypes=STUDENT_FULL_TIME,STUDENT_PART_TIME`",
                        "enum": [
                            "ACTIVE_DUTY",
                            "ALUMNUS",
                            "BUSINESS",
                            "BUSINESS_CONTACT",
                            "CIVILIAN_EMPLOYEE",
                            "CONTRACTOR",
                            "CUSTOMER",
                            "DISABLED_VETERAN",
                            "EMPLOYEE",
                            "EMT",
                            "FACULTY",
                            "FIREFIGHTER",
                            "GRADUATE",
                            "MEMBER",
                            "MILITARY_FAMILY",
                            "MILITARY_RETIREE",
                            "NON_PROFIT",
                            "NURSE",
                            "OWNER",
                            "POLICE",
                            "RESELLER",
                            "RESERVIST",
                            "STUDENT_COLLEGE_BOUND",
                            "STUDENT_FULL_TIME",
                            "STUDENT_PART_TIME",
                            "VETERAN"
                        ],
                        "in": "formData",
                        "items": {"type": "string"},
                        "name": "_affiliationTypes",
                        "required": false,
                        "type": "array"
                    },
                    {
                        "collectionFormat": "multi",
                        "description": "A comma-delimited list of verification type names (see [List Verification Types](#!/VerificationType/listVerificationTypes)). Defines the requestor's list of acceptable techniques that may be used to verify an individual.",
                        "enum": [
                            "ASSET_REVIEW",
                            "AUTHORITATIVE",
                            "EMAIL_LOOP",
                            "HONOR_SYSTEM",
                            "IP_ADDRESS",
                            "SSO",
                            "VALIDATION"
                        ],
                        "in": "formData",
                        "items": {"type": "string"},
                        "name": "_verificationTypes",
                        "required": false,
                        "type": "array"
                    },
                    {
                        "collectionFormat": "multi",
                        "description": "A comma-delimited list of asset type names (see [List Asset Types](#!/AssetType/listAssetTypes)). Defines the requestor's list of acceptable documents for use with `ASSET_REVIEW` verification types.  If `ASSET_REVIEW` is not an allowable verification type, this configuration is ignored.",
                        "enum": [
                            "ACCEPTANCE_LETTER",
                            "ARTICLES_OF_INCORPORATION",
                            "BUSINESS_TAX_FORM_PAGE1",
                            "CLASS_SCHEDULE",
                            "DATED_ID_CARD",
                            "DBA_REGISTRATION",
                            "DD214",
                            "ID_CARD",
                            "INSURANCE_CARD",
                            "IRS_SCHEDULE_B1_FORM_1065",
                            "IRS_SCHEDULE_C_OR_CEZ_PAGE_1",
                            "IRS_SCHEDULE_G_FORM_1120",
                            "IRS_SCHEDULE_K1_FORM_1065",
                            "IRS_SCHEDULE_K1_FORM_1120S",
                            "LEASE_AGREEMENT",
                            "LETTER_OF_AUTHORIZATION",
                            "OFFICIAL_LETTER",
                            "OTHER",
                            "PAY_STUB",
                            "POWER_OF_ATTORNEY",
                            "REGISTRATION_RECEIPT",
                            "REPORT_CARD",
                            "SECRETARY_OF_STATE_FILING",
                            "TRANSCRIPT",
                            "TUITION_RECEIPT",
                            "VENDOR_STATEMENT"
                        ],
                        "in": "formData",
                        "items": {"type": "string"},
                        "name": "_assetTypes",
                        "required": false,
                        "type": "array"
                    },
                    {
                        "collectionFormat": "multi",
                        "description": "A comma-delimited list of Reward IDs (see [List Rewards](#!/Reward/listRewards)). Defines any rewards to be issued when an individual is verified.",
                        "in": "formData",
                        "items": {"type": "string"},
                        "name": "_rewardIds",
                        "required": false,
                        "type": "array"
                    },
                    {
                        "description": "an optional beginning date for this template",
                        "format": "date",
                        "in": "formData",
                        "name": "begins",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "an optional expiration date for this template",
                        "format": "date",
                        "in": "formData",
                        "name": "expires",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "default": "true",
                        "description": "enable/disable access to this template",
                        "in": "formData",
                        "name": "active",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "default": "false",
                        "description": "`true` to replace the extended template configuration",
                        "in": "formData",
                        "name": "withMetadata",
                        "required": false,
                        "type": "boolean"
                    }
                ],
                "produces": ["application/json"],
                "responses": {"200": {
                    "description": "A single [VerificationRequestTemplate](#!/definitions/VerificationRequestTemplate) object",
                    "schema": {"$ref": "#/definitions/VerificationRequestTemplate"}
                }},
                "summary": "Update Template",
                "tags": ["Template"]
            }
        },
        "/template/{templateId}/activate": {"post": {
            "consumes": [],
            "description": "Activates a disabled template.",
            "operationId": "activateTemplate",
            "parameters": [{
                "description": "the identifier of an existing verification request template",
                "in": "path",
                "name": "templateId",
                "required": true,
                "type": "string"
            }],
            "produces": [],
            "responses": {"200": {
                "description": "TODO",
                "schema": {"$ref": "#/definitions/dummy"}
            }},
            "summary": "Activate Template",
            "tags": ["Template"]
        }},
        "/template/{templateId}/disable": {"post": {
            "consumes": [],
            "description": "Disables a template.",
            "operationId": "disableTemplate",
            "parameters": [{
                "description": "the identifier of an existing verification request template",
                "in": "path",
                "name": "templateId",
                "required": true,
                "type": "string"
            }],
            "produces": [],
            "responses": {"200": {
                "description": "TODO",
                "schema": {"$ref": "#/definitions/dummy"}
            }},
            "summary": "Disable Template",
            "tags": ["Template"]
        }},
        "/template/{templateId}/token": {"post": {
            "consumes": [],
            "description": "Issue one or more single-use tokens that can be used to perform a verification using a specific template.",
            "operationId": "issueVerificationTokens",
            "parameters": [
                {
                    "description": "the identifier of an existing verification request template as returned by [Create Template](#!/Template/createTemplate)",
                    "in": "path",
                    "name": "templateId",
                    "required": true,
                    "type": "string"
                },
                {
                    "default": "86400000",
                    "description": "time (in milliseconds) before the token expires (default: 1 day)",
                    "format": "long",
                    "in": "formData",
                    "name": "lifespan",
                    "required": false,
                    "type": "number"
                },
                {
                    "default": "1",
                    "description": "how many tokens to issue (default: 1, max: 5000)",
                    "format": "integer",
                    "in": "formData",
                    "name": "numTokens",
                    "required": false,
                    "type": "number"
                }
            ],
            "produces": ["application/json"],
            "responses": {"200": {
                "description": "A list of [ExpiringToken](#!/definitions/ExpiringToken) objects",
                "schema": {"$ref": "#/definitions/ExpiringToken"}
            }},
            "summary": "Issue Verification Tokens",
            "tags": ["Template"]
        }},
        "/template/{templateId}/url": {"get": {
            "consumes": [],
            "description": "Get URL(s) for accessing a verification template",
            "operationId": "listTemplateUrls",
            "parameters": [{
                "description": "the identifier of an existing verification request template",
                "in": "path",
                "name": "templateId",
                "required": true,
                "type": "string"
            }],
            "produces": ["application/json"],
            "responses": {"200": {
                "description": "one or more URLs for accessing this template",
                "schema": {"$ref": "#/definitions/dummy"}
            }},
            "summary": "List Template Urls",
            "tags": ["Template"]
        }},
        "/token/redemption": {"post": {
            "consumes": [],
            "description": "Issue a single-use code to enable the redemption of an offer",
            "operationId": "issueRedemptionToken",
            "parameters": [
                {
                    "description": "some data which may be stored with the token for context",
                    "in": "formData",
                    "name": "data",
                    "required": false,
                    "type": "string"
                },
                {
                    "default": "86400000",
                    "description": "time (in milliseconds) before the token expires (default: 1 day)",
                    "format": "long",
                    "in": "formData",
                    "name": "lifespan",
                    "required": false,
                    "type": "number"
                }
            ],
            "produces": ["application/json"],
            "responses": {"200": {
                "description": "A single [ExpiringToken](#!/definitions/ExpiringToken) object",
                "schema": {"$ref": "#/definitions/ExpiringToken"}
            }},
            "summary": "Issue Redemption Token",
            "tags": ["Token"]
        }},
        "/token/redemption/{token}": {"get": {
            "consumes": [],
            "description": "Check that a given redemption token is valid",
            "operationId": "checkToken",
            "parameters": [{
                "description": "an existing redemption token",
                "in": "path",
                "name": "token",
                "required": true,
                "type": "string"
            }],
            "produces": ["application/json"],
            "responses": {"200": {
                "description": "A single [ExpiringToken](#!/definitions/ExpiringToken) object",
                "schema": {"$ref": "#/definitions/ExpiringToken"}
            }},
            "summary": "Check Token",
            "tags": ["Token"]
        }},
        "/token/redemption/{token}/redeem": {"post": {
            "consumes": [],
            "description": "Check that a given redemption token is valid and revoke it",
            "operationId": "redeemToken",
            "parameters": [{
                "description": "an existing redemption token",
                "in": "path",
                "name": "token",
                "required": true,
                "type": "string"
            }],
            "produces": ["application/json"],
            "responses": {"200": {
                "description": "A single [ExpiringToken](#!/definitions/ExpiringToken) object",
                "schema": {"$ref": "#/definitions/ExpiringToken"}
            }},
            "summary": "Redeem Token",
            "tags": ["Token"]
        }},
        "/token/verification/{token}": {"get": {
            "consumes": [],
            "description": "Check that a given verification token is valid",
            "operationId": "checkVerificationToken",
            "parameters": [{
                "description": "an existing verification token",
                "in": "path",
                "name": "token",
                "required": true,
                "type": "string"
            }],
            "produces": ["application/json"],
            "responses": {"200": {
                "description": "A single [ReferenceToken](#!/definitions/ReferenceToken) object",
                "schema": {"$ref": "#/definitions/ReferenceToken"}
            }},
            "summary": "Check Verification Token",
            "tags": ["Token"]
        }},
        "/token/{token}": {"delete": {
            "consumes": [],
            "description": "Revoke a token, making it immediately invalid.",
            "operationId": "revokeToken",
            "parameters": [{
                "description": "the token to revoke (can be any type of token)",
                "in": "path",
                "name": "token",
                "required": true,
                "type": "string"
            }],
            "produces": [],
            "responses": {"200": {
                "description": "TODO",
                "schema": {"$ref": "#/definitions/dummy"}
            }},
            "summary": "Revoke Token",
            "tags": ["Token"]
        }},
        "/user": {
            "get": {
                "consumes": [],
                "description": "List users",
                "operationId": "listUsers",
                "parameters": [],
                "produces": [],
                "responses": {"200": {
                    "description": "A list of [User](#!/definitions/User) objects",
                    "schema": {"$ref": "#/definitions/User"}
                }},
                "summary": "List Users",
                "tags": ["User"]
            },
            "post": {
                "consumes": [],
                "description": "Create a new subuser within an existing account.\n Callers must be the account owner or have `USER_ADMIN` role.",
                "operationId": "createUser",
                "parameters": [
                    {
                        "description": "",
                        "in": "formData",
                        "name": "username",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "the password for the new subuser",
                        "in": "formData",
                        "name": "password",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "the new subuser's first name",
                        "in": "formData",
                        "name": "firstName",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "the new subuser's last name",
                        "in": "formData",
                        "name": "lastName",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "the new subuser's company name",
                        "in": "formData",
                        "name": "company",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "the new subuser's email address",
                        "in": "formData",
                        "name": "email",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "the new subuser's phone number",
                        "in": "formData",
                        "name": "phone",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": ["application/json"],
                "responses": {"200": {
                    "description": "A single [User](#!/definitions/User) object",
                    "schema": {"$ref": "#/definitions/User"}
                }},
                "summary": "Create User",
                "tags": ["User"]
            }
        },
        "/user/mine": {
            "get": {
                "consumes": [],
                "description": "Retrieve the current user",
                "operationId": "retrieveCurrentUser",
                "parameters": [],
                "produces": [],
                "responses": {"200": {
                    "description": "A single [User](#!/definitions/User) object",
                    "schema": {"$ref": "#/definitions/User"}
                }},
                "summary": "Retrieve Current User",
                "tags": ["User"]
            },
            "put": {
                "consumes": [],
                "description": "Update current user",
                "operationId": "updateCurrentUser",
                "parameters": [{
                    "description": "of the user.",
                    "in": "formData",
                    "name": "friendlyName",
                    "required": false,
                    "type": "string"
                }],
                "produces": [],
                "responses": {"200": {
                    "description": "A single [ResultWrapper](#!/definitions/ResultWrapper) object",
                    "schema": {"$ref": "#/definitions/ResultWrapper"}
                }},
                "summary": "Update Current User",
                "tags": ["User"]
            }
        },
        "/user/{userId}": {
            "delete": {
                "consumes": [],
                "description": "Remove a user",
                "operationId": "removeUser",
                "parameters": [{
                    "description": "the user id of the user to remove.",
                    "in": "path",
                    "name": "userId",
                    "required": true,
                    "type": "string"
                }],
                "produces": [],
                "responses": {"200": {
                    "description": "A single [ResultWrapper](#!/definitions/ResultWrapper) object",
                    "schema": {"$ref": "#/definitions/ResultWrapper"}
                }},
                "summary": "Remove User",
                "tags": ["User"]
            },
            "get": {
                "consumes": [],
                "description": "Retrieve a user by ID",
                "operationId": "retrieveUser",
                "parameters": [{
                    "description": "the user id of the user to return.",
                    "in": "path",
                    "name": "userId",
                    "required": true,
                    "type": "string"
                }],
                "produces": [],
                "responses": {"200": {
                    "description": "A single [User](#!/definitions/User) object",
                    "schema": {"$ref": "#/definitions/User"}
                }},
                "summary": "Retrieve User",
                "tags": ["User"]
            }
        },
        "/user/{userId}/role/{role}": {
            "delete": {
                "consumes": [],
                "description": "Remove a role from the specified user",
                "operationId": "revokeRole",
                "parameters": [
                    {
                        "description": "the user id of the user from whom to remove the role",
                        "in": "path",
                        "name": "userId",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "the role to be removed",
                        "enum": [
                            "CUSTOMER_SERVICE",
                            "ORGANIZATION_MANAGER",
                            "PROMOTION_MANAGER",
                            "REPORTER",
                            "RESOURCE_MANAGER",
                            "REVIEWER",
                            "REVIEWER_MANAGER",
                            "REVIEW_REPORTER",
                            "REWARD_ADMIN",
                            "TEMPLATE_ADMIN",
                            "USER_ADMIN"
                        ],
                        "in": "path",
                        "name": "role",
                        "required": true,
                        "schema": {"$ref": "#/definitions/UserRole"},
                        "type": "string"
                    }
                ],
                "produces": ["application/json"],
                "responses": {"200": {
                    "description": "A single [ResultWrapper](#!/definitions/ResultWrapper) object",
                    "schema": {"$ref": "#/definitions/ResultWrapper"}
                }},
                "summary": "Revoke Role",
                "tags": ["User"]
            },
            "post": {
                "consumes": [],
                "description": "Add a role to the specified user",
                "operationId": "addRole",
                "parameters": [
                    {
                        "description": "the user id of the user to whom to add the role.",
                        "in": "path",
                        "name": "userId",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "the role to be added",
                        "enum": [
                            "CUSTOMER_SERVICE",
                            "ORGANIZATION_MANAGER",
                            "PROMOTION_MANAGER",
                            "REPORTER",
                            "RESOURCE_MANAGER",
                            "REVIEWER",
                            "REVIEWER_MANAGER",
                            "REVIEW_REPORTER",
                            "REWARD_ADMIN",
                            "TEMPLATE_ADMIN",
                            "USER_ADMIN"
                        ],
                        "in": "path",
                        "name": "role",
                        "required": true,
                        "schema": {"$ref": "#/definitions/UserRole"},
                        "type": "string"
                    }
                ],
                "produces": ["application/json"],
                "responses": {"200": {
                    "description": "A single [ResultWrapper](#!/definitions/ResultWrapper) object",
                    "schema": {"$ref": "#/definitions/ResultWrapper"}
                }},
                "summary": "Add Role",
                "tags": ["User"]
            }
        },
        "/verification": {
            "get": {
                "consumes": [],
                "description": "Prepare a verification request.",
                "operationId": "prepareVerificationRequest",
                "parameters": [
                    {
                        "description": "a script token which is issued by the account in which the request should be prepared",
                        "in": "query",
                        "name": "token",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "An email address, preferably the one issued by the organization being verified",
                        "in": "query",
                        "name": "EMAIL",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Given name of the verification subject",
                        "in": "query",
                        "name": "FIRST_NAME",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Surname/family name of the verification subject",
                        "in": "query",
                        "name": "LAST_NAME",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Complete birth date of the verification subject",
                        "format": "date",
                        "in": "query",
                        "name": "BIRTH_DATE",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "The date on which the affiliation being verified began. For VETERAN, this is the date of discharge/end of active duty status.",
                        "format": "date",
                        "in": "query",
                        "name": "STATUS_START_DATE",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "an optional organization id, see [List Organizations](#!/Organization/listOrganizations)",
                        "format": "long",
                        "in": "query",
                        "name": "organizationId",
                        "required": false,
                        "type": "number"
                    },
                    {
                        "description": "an organization name supplied when the ID is not known. If `organizationId` is supplied, this parameter is ignored.",
                        "in": "query",
                        "name": "organizationName",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "$ref": "#/definitions/OrganizationType",
                        "description": "an organization type (see [List Organization Types](#!/OrganizationType/listOrganizationTypes)) to help when matching the organization name.  If `organizationId` is supplied or `organizationName` is not supplied, this parameter is ignored.",
                        "enum": [
                            "CORPORATE",
                            "FIRST_RESPONDER",
                            "K12",
                            "MEDICAL",
                            "MEMBERSHIP",
                            "MILITARY",
                            "NON_PROFIT",
                            "UNIVERSITY"
                        ],
                        "in": "query",
                        "name": "organizationType",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "default": "true",
                        "description": "`false` to disable matching of organizationName. If `organizationId` is supplied or `organizationName` is not supplied, this parameter is ignored.",
                        "in": "query",
                        "name": "matchName",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "$ref": "#/definitions/AffiliationType",
                        "collectionFormat": "multi",
                        "description": "A comma-delimited list of affiliation type names (see [List Affiliation Types](#!/AffiliationType/listAffiliationTypes)). Defines the affiliations the requestor deems acceptable for a given verification. (For example, when attempting to verify that an individual is either a full-time or part-time student: `_affiliationTypes=STUDENT_FULL_TIME,STUDENT_PART_TIME`",
                        "enum": [
                            "ACTIVE_DUTY",
                            "ALUMNUS",
                            "BUSINESS",
                            "BUSINESS_CONTACT",
                            "CIVILIAN_EMPLOYEE",
                            "CONTRACTOR",
                            "CUSTOMER",
                            "DISABLED_VETERAN",
                            "EMPLOYEE",
                            "EMT",
                            "FACULTY",
                            "FIREFIGHTER",
                            "GRADUATE",
                            "MEMBER",
                            "MILITARY_FAMILY",
                            "MILITARY_RETIREE",
                            "NON_PROFIT",
                            "NURSE",
                            "OWNER",
                            "POLICE",
                            "RESELLER",
                            "RESERVIST",
                            "STUDENT_COLLEGE_BOUND",
                            "STUDENT_FULL_TIME",
                            "STUDENT_PART_TIME",
                            "VETERAN"
                        ],
                        "in": "query",
                        "items": {"type": "string"},
                        "name": "_affiliationTypes",
                        "required": false,
                        "type": "array"
                    },
                    {
                        "$ref": "#/definitions/VerificationType",
                        "collectionFormat": "multi",
                        "description": "A comma-delimited list of verification type names (see [List Verification Types](#!/VerificationType/listVerificationTypes)). Defines the requestor's list of acceptable techniques that may be used to verify an individual.",
                        "enum": [
                            "ASSET_REVIEW",
                            "AUTHORITATIVE",
                            "EMAIL_LOOP",
                            "HONOR_SYSTEM",
                            "IP_ADDRESS",
                            "SSO",
                            "VALIDATION"
                        ],
                        "in": "query",
                        "items": {"type": "string"},
                        "name": "_verificationTypes",
                        "required": false,
                        "type": "array"
                    },
                    {
                        "$ref": "#/definitions/AssetType",
                        "collectionFormat": "multi",
                        "description": "A comma-delimited list of asset type names (see [List Asset Types](#!/AssetType/listAssetTypes)). Defines the requestor's list of acceptable documents for use with `ASSET_REVIEW` verification types.  If `ASSET_REVIEW` is not an allowable verification type, this configuration is ignored.",
                        "enum": [
                            "ACCEPTANCE_LETTER",
                            "ARTICLES_OF_INCORPORATION",
                            "BUSINESS_TAX_FORM_PAGE1",
                            "CLASS_SCHEDULE",
                            "DATED_ID_CARD",
                            "DBA_REGISTRATION",
                            "DD214",
                            "ID_CARD",
                            "INSURANCE_CARD",
                            "IRS_SCHEDULE_B1_FORM_1065",
                            "IRS_SCHEDULE_C_OR_CEZ_PAGE_1",
                            "IRS_SCHEDULE_G_FORM_1120",
                            "IRS_SCHEDULE_K1_FORM_1065",
                            "IRS_SCHEDULE_K1_FORM_1120S",
                            "LEASE_AGREEMENT",
                            "LETTER_OF_AUTHORIZATION",
                            "OFFICIAL_LETTER",
                            "OTHER",
                            "PAY_STUB",
                            "POWER_OF_ATTORNEY",
                            "REGISTRATION_RECEIPT",
                            "REPORT_CARD",
                            "SECRETARY_OF_STATE_FILING",
                            "TRANSCRIPT",
                            "TUITION_RECEIPT",
                            "VENDOR_STATEMENT"
                        ],
                        "in": "query",
                        "items": {"type": "string"},
                        "name": "_assetTypes",
                        "required": false,
                        "type": "array"
                    },
                    {
                        "collectionFormat": "multi",
                        "description": "A comma-delimited list of Reward IDs (see [List Rewards](#!/Reward/listRewards)). Defines any rewards to be issued when an individual is verified.",
                        "in": "query",
                        "items": {"type": "string"},
                        "name": "_rewardIds",
                        "required": false,
                        "type": "array"
                    },
                    {
                        "description": "metadata value for the supplied key (ex: `:orderId=179365`)",
                        "in": "query",
                        "name": "_metadata key (any string prefixed with `:`)_",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [],
                "responses": {"200": {
                    "description": "TODO",
                    "schema": {"$ref": "#/definitions/dummy"}
                }},
                "summary": "Prepare Verification Request",
                "tags": ["Verification"]
            },
            "post": {
                "consumes": ["application/x-www-form-urlencoded"],
                "description": "**Perform a verification.** This is the primary method of importance for most integrations.\n Fields to supply vary based on the affiliations the caller is interested in verifying and the type of verification being performed.  For a list of which fields are relevant for a particular type of request, see the [verification field requirements documentation](http://developer.sheerid.com/docs/fields.html).",
                "operationId": "verify",
                "parameters": [
                    {
                        "description": "An email address, preferably the one issued by the organization being verified",
                        "in": "formData",
                        "name": "EMAIL",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Given name of the verification subject",
                        "in": "formData",
                        "name": "FIRST_NAME",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Surname/family name of the verification subject",
                        "in": "formData",
                        "name": "LAST_NAME",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Complete birth date of the verification subject",
                        "format": "date",
                        "in": "formData",
                        "name": "BIRTH_DATE",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "The date on which the affiliation being verified began. For VETERAN, this is the date of discharge/end of active duty status.",
                        "format": "date",
                        "in": "formData",
                        "name": "STATUS_START_DATE",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "an optional organization id, see [List Organizations](#!/Organization/listOrganizations)",
                        "format": "long",
                        "in": "formData",
                        "name": "organizationId",
                        "required": false,
                        "type": "number"
                    },
                    {
                        "description": "an organization name supplied when the ID is not known. If `organizationId` is supplied, this parameter is ignored.",
                        "in": "formData",
                        "name": "organizationName",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "an organization type (see [List Organization Types](#!/OrganizationType/listOrganizationTypes)) to help when matching the organization name.  If `organizationId` is supplied or `organizationName` is not supplied, this parameter is ignored.",
                        "enum": [
                            "CORPORATE",
                            "FIRST_RESPONDER",
                            "K12",
                            "MEDICAL",
                            "MEMBERSHIP",
                            "MILITARY",
                            "NON_PROFIT",
                            "UNIVERSITY"
                        ],
                        "in": "formData",
                        "name": "organizationType",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "default": "true",
                        "description": "`false` to disable matching of organizationName. If `organizationId` is supplied or `organizationName` is not supplied, this parameter is ignored.",
                        "in": "formData",
                        "name": "matchName",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "collectionFormat": "multi",
                        "description": "A comma-delimited list of affiliation type names (see [List Affiliation Types](#!/AffiliationType/listAffiliationTypes)). Defines the affiliations the requestor deems acceptable for a given verification. (For example, when attempting to verify that an individual is either a full-time or part-time student: `_affiliationTypes=STUDENT_FULL_TIME,STUDENT_PART_TIME`",
                        "enum": [
                            "ACTIVE_DUTY",
                            "ALUMNUS",
                            "BUSINESS",
                            "BUSINESS_CONTACT",
                            "CIVILIAN_EMPLOYEE",
                            "CONTRACTOR",
                            "CUSTOMER",
                            "DISABLED_VETERAN",
                            "EMPLOYEE",
                            "EMT",
                            "FACULTY",
                            "FIREFIGHTER",
                            "GRADUATE",
                            "MEMBER",
                            "MILITARY_FAMILY",
                            "MILITARY_RETIREE",
                            "NON_PROFIT",
                            "NURSE",
                            "OWNER",
                            "POLICE",
                            "RESELLER",
                            "RESERVIST",
                            "STUDENT_COLLEGE_BOUND",
                            "STUDENT_FULL_TIME",
                            "STUDENT_PART_TIME",
                            "VETERAN"
                        ],
                        "in": "formData",
                        "items": {"type": "string"},
                        "name": "_affiliationTypes",
                        "required": false,
                        "type": "array"
                    },
                    {
                        "collectionFormat": "multi",
                        "description": "A comma-delimited list of verification type names (see [List Verification Types](#!/VerificationType/listVerificationTypes)). Defines the requestor's list of acceptable techniques that may be used to verify an individual.",
                        "enum": [
                            "ASSET_REVIEW",
                            "AUTHORITATIVE",
                            "EMAIL_LOOP",
                            "HONOR_SYSTEM",
                            "IP_ADDRESS",
                            "SSO",
                            "VALIDATION"
                        ],
                        "in": "formData",
                        "items": {"type": "string"},
                        "name": "_verificationTypes",
                        "required": false,
                        "type": "array"
                    },
                    {
                        "collectionFormat": "multi",
                        "description": "A comma-delimited list of asset type names (see [List Asset Types](#!/AssetType/listAssetTypes)). Defines the requestor's list of acceptable documents for use with `ASSET_REVIEW` verification types.  If `ASSET_REVIEW` is not an allowable verification type, this configuration is ignored.",
                        "enum": [
                            "ACCEPTANCE_LETTER",
                            "ARTICLES_OF_INCORPORATION",
                            "BUSINESS_TAX_FORM_PAGE1",
                            "CLASS_SCHEDULE",
                            "DATED_ID_CARD",
                            "DBA_REGISTRATION",
                            "DD214",
                            "ID_CARD",
                            "INSURANCE_CARD",
                            "IRS_SCHEDULE_B1_FORM_1065",
                            "IRS_SCHEDULE_C_OR_CEZ_PAGE_1",
                            "IRS_SCHEDULE_G_FORM_1120",
                            "IRS_SCHEDULE_K1_FORM_1065",
                            "IRS_SCHEDULE_K1_FORM_1120S",
                            "LEASE_AGREEMENT",
                            "LETTER_OF_AUTHORIZATION",
                            "OFFICIAL_LETTER",
                            "OTHER",
                            "PAY_STUB",
                            "POWER_OF_ATTORNEY",
                            "REGISTRATION_RECEIPT",
                            "REPORT_CARD",
                            "SECRETARY_OF_STATE_FILING",
                            "TRANSCRIPT",
                            "TUITION_RECEIPT",
                            "VENDOR_STATEMENT"
                        ],
                        "in": "formData",
                        "items": {"type": "string"},
                        "name": "_assetTypes",
                        "required": false,
                        "type": "array"
                    },
                    {
                        "collectionFormat": "multi",
                        "description": "A comma-delimited list of Reward IDs (see [List Rewards](#!/Reward/listRewards)). Defines any rewards to be issued when an individual is verified.",
                        "in": "formData",
                        "items": {"type": "string"},
                        "name": "_rewardIds",
                        "required": false,
                        "type": "array"
                    },
                    {
                        "description": "metadata value for the supplied key (ex: `:orderId=179365`)",
                        "in": "formData",
                        "name": "_metadata key (any string prefixed with `:`)_",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "the identifier of an existing template (see [Create Template](#!/Template/createTemplate)) from which to source verification request configuration. If this value is supplied, any other request configuration directives (parameters prefixed with `_`) will override the values from the template.",
                        "in": "formData",
                        "name": "templateId",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "a custom identifier for tracking a unique end-user as recognized by a client system",
                        "in": "formData",
                        "name": "endUserId",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "the end-user's IP address, may be supplied in situations where the API is invoked by an intermediate server",
                        "in": "formData",
                        "name": "endUserIp",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": ["application/json"],
                "responses": {"200": {
                    "description": "A single [VerificationResponse](#!/definitions/VerificationResponse) object",
                    "schema": {"$ref": "#/definitions/VerificationResponse"}
                }},
                "summary": "Verify",
                "tags": ["Verification"]
            }
        },
        "/verification/search": {"get": {
            "consumes": [],
            "description": "Obtain a list of requests that match either name or email details.",
            "operationId": "search",
            "parameters": [
                {
                    "description": "An email address, preferably the one issued by the organization being verified",
                    "in": "query",
                    "name": "EMAIL",
                    "required": false,
                    "type": "string"
                },
                {
                    "description": "Given name of the verification subject",
                    "in": "query",
                    "name": "FIRST_NAME",
                    "required": false,
                    "type": "string"
                },
                {
                    "description": "Surname/family name of the verification subject",
                    "in": "query",
                    "name": "LAST_NAME",
                    "required": false,
                    "type": "string"
                },
                {
                    "description": "Complete birth date of the verification subject",
                    "format": "date",
                    "in": "query",
                    "name": "BIRTH_DATE",
                    "required": false,
                    "type": "string"
                },
                {
                    "description": "The date on which the affiliation being verified began. For VETERAN, this is the date of discharge/end of active duty status.",
                    "format": "date",
                    "in": "query",
                    "name": "STATUS_START_DATE",
                    "required": false,
                    "type": "string"
                },
                {
                    "description": "metadata value for the supplied key (ex: `:orderId=179365`)",
                    "in": "query",
                    "name": "_metadata key (any string prefixed with `:`)_",
                    "required": false,
                    "type": "string"
                }
            ],
            "produces": ["application/json"],
            "responses": {"200": {
                "description": "A list of [VerificationResponse](#!/definitions/VerificationResponse) objects",
                "schema": {"$ref": "#/definitions/VerificationResponse"}
            }},
            "summary": "Search",
            "tags": ["Verification"]
        }},
        "/verification/template/{templateId}/authorizedVerification": {"get": {
            "consumes": [],
            "description": "[Beta] Get an authorizedVerificationRequest containing a verification request schema.\n This method is in beta and is subject to change.",
            "operationId": "getAuthorizedVerificationRequest",
            "parameters": [{
                "description": "",
                "in": "path",
                "name": "templateId",
                "required": true,
                "type": "string"
            }],
            "produces": ["application/json"],
            "responses": {"200": {
                "description": "A single [AuthorizedVerificationRequest](#!/definitions/AuthorizedVerificationRequest) object",
                "schema": {"$ref": "#/definitions/AuthorizedVerificationRequest"}
            }},
            "summary": "Get Authorized Verification Request",
            "tags": ["Verification"]
        }},
        "/verification/template/{templateId}/authorizedVerification/{id}": {
            "get": {
                "consumes": [],
                "description": "[Beta] Get an existing authorizedVerificationRequest containing a verification request schema.\n This method is in beta and is subject to change.",
                "operationId": "getAuthorizedVerificationRequest",
                "parameters": [
                    {
                        "description": "",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "",
                        "in": "path",
                        "name": "templateId",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": ["application/json"],
                "responses": {"200": {
                    "description": "A single [AuthorizedVerificationRequest](#!/definitions/AuthorizedVerificationRequest) object",
                    "schema": {"$ref": "#/definitions/AuthorizedVerificationRequest"}
                }},
                "summary": "Get Authorized Verification Request",
                "tags": ["Verification"]
            },
            "put": {
                "consumes": ["application/x-www-form-urlencoded"],
                "description": "[Beta] Verify a authorizedVerificationRequest.\n This method is in beta and is subject to change.",
                "operationId": "verifyAuthorizedVerificationRequest",
                "parameters": [
                    {
                        "description": "",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "",
                        "in": "path",
                        "name": "templateId",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": ["application/json"],
                "responses": {"200": {
                    "description": "A single [VerificationUserResponse](#!/definitions/VerificationUserResponse) object",
                    "schema": {"$ref": "#/definitions/VerificationUserResponse"}
                }},
                "summary": "Verify Authorized Verification Request",
                "tags": ["Verification"]
            }
        },
        "/verification/{requestId}": {
            "get": {
                "consumes": [],
                "description": "Check the status of a historical verification.",
                "operationId": "inquire",
                "parameters": [{
                    "description": "the identifier returned with the original request",
                    "in": "path",
                    "name": "requestId",
                    "required": true,
                    "type": "string"
                }],
                "produces": ["application/json"],
                "responses": {"200": {
                    "description": "A single [VerificationResponse](#!/definitions/VerificationResponse) object",
                    "schema": {"$ref": "#/definitions/VerificationResponse"}
                }},
                "summary": "Inquire",
                "tags": ["Verification"]
            },
            "post": {
                "consumes": ["application/x-www-form-urlencoded"],
                "description": "Update and re-submit an existing verification request.\n The previous response to this request must have a result of `null`, otherwise update is disallowed. Only identity data can be changed (parameter names as described by [List Fields](#!/Field/listFields)). Organization id/name or other configuration supplied with the original request is not modifiable.",
                "operationId": "updateVerification",
                "parameters": [
                    {
                        "description": "the identifier returned with the original request",
                        "in": "path",
                        "name": "requestId",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "An email address, preferably the one issued by the organization being verified",
                        "in": "formData",
                        "name": "EMAIL",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Given name of the verification subject",
                        "in": "formData",
                        "name": "FIRST_NAME",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Surname/family name of the verification subject",
                        "in": "formData",
                        "name": "LAST_NAME",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Complete birth date of the verification subject",
                        "format": "date",
                        "in": "formData",
                        "name": "BIRTH_DATE",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "The date on which the affiliation being verified began. For VETERAN, this is the date of discharge/end of active duty status.",
                        "format": "date",
                        "in": "formData",
                        "name": "STATUS_START_DATE",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": ["application/json"],
                "responses": {"200": {
                    "description": "A single [VerificationResponse](#!/definitions/VerificationResponse) object",
                    "schema": {"$ref": "#/definitions/VerificationResponse"}
                }},
                "summary": "Update Verification",
                "tags": ["Verification"]
            }
        },
        "/verification/{requestId}/assets": {"get": {
            "consumes": [],
            "description": "Obtain a list of the digital assets that accompany a particular verification request.",
            "operationId": "listAssets",
            "parameters": [{
                "description": "the identifier of a verification request",
                "in": "path",
                "name": "requestId",
                "required": true,
                "type": "string"
            }],
            "produces": ["application/json"],
            "responses": {"200": {
                "description": "A list of [Asset](#!/definitions/Asset) objects",
                "schema": {"$ref": "#/definitions/Asset"}
            }},
            "summary": "List Assets",
            "tags": ["Verification"]
        }},
        "/verification/{requestId}/metadata": {"post": {
            "consumes": ["application/x-www-form-urlencoded"],
            "description": "Update meta-data pertaining to a verification request.",
            "operationId": "updateVerificationRequestMetadata",
            "parameters": [
                {
                    "description": "the identifier returned with the original request",
                    "in": "path",
                    "name": "requestId",
                    "required": true,
                    "type": "string"
                },
                {
                    "description": "string value used to store meta-data with a request",
                    "in": "formData",
                    "name": "_a string key_",
                    "required": false,
                    "type": "string"
                }
            ],
            "produces": ["application/json"],
            "responses": {"200": {
                "description": "the resulting request meta-data map",
                "schema": {"$ref": "#/definitions/dummy"}
            }},
            "summary": "Update Verification Request Metadata",
            "tags": ["Verification"]
        }},
        "/verification/{requestId}/person": {"get": {
            "consumes": [],
            "description": "Return available person data entered during a request if it has not already been purged in accordance with customer\n data retention policies. This request requires the PERSON_DATA role for the user making the request.",
            "operationId": "getPerson",
            "parameters": [{
                "description": "the identifier of a verification request",
                "in": "path",
                "name": "requestId",
                "required": true,
                "type": "string"
            }],
            "produces": ["application/json"],
            "responses": {"200": {
                "description": "A single [Person](#!/definitions/Person) object",
                "schema": {"$ref": "#/definitions/Person"}
            }},
            "summary": "Get Person",
            "tags": ["Verification"]
        }},
        "/verification/{requestId}/submit": {"post": {
            "consumes": [],
            "description": "Submit a prepared verification request.\n Request must be in the `NEW` status as created by [Prepare Verification Request](#!/Verification/prepareVerificationRequest).",
            "operationId": "submitVerificationRequest",
            "parameters": [{
                "description": "the identifier returned with the original request",
                "in": "path",
                "name": "requestId",
                "required": true,
                "type": "string"
            }],
            "produces": ["application/json"],
            "responses": {"200": {
                "description": "A single [VerificationResponse](#!/definitions/VerificationResponse) object",
                "schema": {"$ref": "#/definitions/VerificationResponse"}
            }},
            "summary": "Submit Verification Request",
            "tags": ["Verification"]
        }},
        "/verificationType": {"get": {
            "consumes": [],
            "description": "Obtain a list of verification types.",
            "operationId": "listVerificationTypes",
            "parameters": [],
            "produces": ["application/json"],
            "responses": {"200": {
                "description": "A list of strings",
                "schema": {"$ref": "#/definitions/dummy"}
            }},
            "summary": "List Verification Types",
            "tags": ["VerificationType"]
        }}
    },
    "swagger": "2.0"
}